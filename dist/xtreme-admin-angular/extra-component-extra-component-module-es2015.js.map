{"version":3,"sources":["webpack:///./node_modules/angular-file-uploader/fesm2015/angular-file-uploader.js","webpack:///./node_modules/ngx-toastr/fesm2015/ngx-toastr.js","webpack:///./src/app/extra-component/drag-n-drop/drag.component.html","webpack:///./src/app/extra-component/editor/editor.component.html","webpack:///./src/app/extra-component/file-upload/upload.component.html","webpack:///./src/app/extra-component/toastr/toastr.component.html","webpack:///./src/app/extra-component/drag-n-drop/drag.component.ts","webpack:///./src/app/extra-component/drag-n-drop/drag.scss","webpack:///./src/app/extra-component/editor/editor.component.ts","webpack:///./src/app/extra-component/extra-component.module.ts","webpack:///./src/app/extra-component/extra-component.routing.ts","webpack:///./src/app/extra-component/file-upload/upload.component.ts","webpack:///./src/app/extra-component/file-upload/upload.scss","webpack:///./src/app/extra-component/toastr/toastr.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+G;AAChE;;AAE/C;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA,mBAAmB;AACnB;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA,aAAa,IAAI;AACjB;AACA;AACA,gEAAgE,sEAAgB,EAAE,yDAAyD,yCAAyC,EAAE,yDAAyD;;AAE/O;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA,+BAA+B,0DAAY;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,OAAO;AAC7C;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,+BAA+B;AAClD;AACA;AACA;AACA;AACA,kDAAkD,8BAA8B;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D,0DAA0D,MAAM;AAChE;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,oBAAoB,EAAE;AACtB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;;AAEA;AACA;AACA,sCAAsC;AACtC;AACA,gDAAgD,4BAA4B;AAC5E;AACA,sEAAsE,IAAI,IAAI,wBAAwB;AACtG;AACA;AACA;;AAEA,qBAAqB,IAAI,yEAAyE,6BAA6B;AAC/H,gCAAgC,IAAI;AACpC;AACA,mHAAmH,wBAAwB;AAC3I;AACA,wDAAwD,gBAAgB,gBAAgB,iCAAiC;AACzH;AACA,oEAAoE;AACpE,sEAAsE,SAAS;AAC/E,qDAAqD,sBAAsB,gBAAgB,MAAM,MAAM,MAAM,MAAM;AACnH;AACA;AACA,2FAA2F,4BAA4B,IAAI,iBAAiB;AAC5I;AACA;AACA;AACA;AACA,mFAAmF;AACnF,iDAAiD,gBAAgB;AACjE,qDAAqD,gBAAgB;AACrE,+BAA+B,gBAAgB;AAC/C,6GAA6G;AAC7G;;AAEA,kCAAkC,gBAAgB,wBAAwB,eAAe;AACzF;AACA;AACA,2FAA2F,4BAA4B,IAAI,iBAAiB;AAC5I;AACA;AACA;AACA;AACA,iHAAiH,yBAAyB;AAC1I;AACA;;AAEA;AACA;AACA,kCAAkC;AAClC;AACA,YAAY;AACZ;AACA,+CAA+C,gBAAgB,gBAAgB,kCAAkC;AACjH,wCAAwC,IAAI;AAC5C;AACA;AACA;AACA;AACA,6DAA6D,IAAI,IAAI,wBAAwB;AAC7F;AACA;;AAEA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA,yDAAyD,IAAI,IAAI,wBAAwB;AACzF;AACA;AACA;AACA,4CAA4C,gBAAgB,kBAAkB,SAAS,UAAU,gBAAgB,SAAS,iBAAiB,cAAc,mBAAmB,gBAAgB,gBAAgB,uBAAuB,QAAQ,WAAW,6BAA6B,yBAAyB,mBAAmB,aAAa,qBAAqB,cAAc,iBAAiB,mBAAmB,0BAA0B,YAAY,YAAY,mBAAmB,kBAAkB,gBAAgB,cAAc,iBAAiB,iBAAiB,oBAAoB,oCAAoC,SAAS,WAAW,oCAAoC,OAAO,WAAW,oCAAoC,gBAAgB,gBAAgB,UAAU,gBAAgB;AAC1wB,aAAa,IAAI;AACjB;AACA;AACA;AACA,cAAc,OAAO,mDAAK,EAAE;AAC5B,mBAAmB,OAAO,mDAAK,EAAE;AACjC,mBAAmB,OAAO,oDAAM,EAAE;AAClC;;AAEA;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB;AACA,oBAAoB,4DAAY;AAChC;AACA;AACA;AACA,aAAa,IAAI;AACjB;;AAEA;AACA;AACA,cAAc,oCAAoC;AAClD;;AAEA;AACA;AACA,cAAc,oCAAoC;AAClD;;AAE+F;;AAE/F,2CAA2C,cAAc,2/gC;;;;;;;;;;;;ACzczD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2O;AAC5M;AAC0B;AACwB;AAClC;;AAE/C;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4CAAO;AACjC,6BAA6B,4CAAO;AACpC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,0BAA0B,EAAE,iBAAiB,EAAE;AAC/C;AACA;;AAEA;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB,EAAE;AAClB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA;AACA;AACA,KAAK,yBAAyB;AAC9B,KAAK,OAAO,sEAAwB,EAAE;AACtC,KAAK,OAAO,4DAAc;AAC1B;AACA;AACA;AACA,SAAS,EAAE;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,4CAAO;AACvC;AACA;AACA;AACA,6BAA6B,4CAAO;AACpC;AACA;AACA;AACA,gCAAgC,4CAAO;AACvC;AACA;AACA;AACA,iCAAiC,4CAAO;AACxC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,oCAAoC;AAClD;AACA,WAAW,EAAE;AACb,yBAAyB,4DAAc;;AAEvC;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,4CAA4C;AAC5C,wDAAwD;AACxD;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,yCAAyC;AACzC,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,uCAAuC;AACvC,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,sCAAsC;AACtC,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,yCAAyC;AACzC,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,6BAA6B;AAC7B,+BAA+B;AAC/B;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,wBAAwB;AAC/C;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uDAAuD,6DAAe;AACtE;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,iDAAiD,EAAE;AACnD,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA;AACA;AACA,KAAK,gCAAgC,OAAO,oDAAM,yBAAyB,GAAG;AAC9E,KAAK,gBAAgB;AACrB,KAAK,OAAO,sDAAQ,EAAE;AACtB,KAAK,OAAO,sEAAY,EAAE;AAC1B,KAAK,OAAO,oDAAM;AAClB;;AAEA;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,uBAAuB,GAAG,+BAA+B;AACxF;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,qCAAqC,eAAe,kBAAkB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,qCAAqC,eAAe,kBAAkB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,eAAe,mBAAmB;AACvE;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mEAAO;AAC3B,wBAAwB,iEAAK,aAAa,iEAAK;AAC/C;AACA;AACA,yBAAyB;AACzB,wBAAwB,iEAAK,WAAW,iEAAK,GAAG;AAChD,wBAAwB,iEAAK,YAAY,iEAAK,EAAE,aAAa;AAC7D,wBAAwB,sEAAU,uBAAuB,mEAAO,IAAI,YAAY,KAAK,UAAU;AAC/F,wBAAwB,sEAAU,sBAAsB,mEAAO,IAAI,YAAY,KAAK,UAAU;AAC9F;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK,sBAAsB;AAC3B,KAAK,qBAAqB;AAC1B,KAAK,OAAO,oDAAM;AAClB;AACA;AACA,oBAAoB,OAAO,yDAAW,oBAAoB;AAC1D,aAAa,OAAO,yDAAW,wBAAwB;AACvD,gBAAgB,OAAO,0DAAY,oBAAoB;AACvD,mBAAmB,OAAO,0DAAY,yBAAyB;AAC/D,wBAAwB,OAAO,0DAAY,yBAAyB;AACpE;;AAEA;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,8BAA8B;AAC9B;AACA;AACA;AACA,iBAAiB,mCAAmC,wCAAwC,EAAE;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB,0BAA0B,4DAAY;AACtC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK,mCAAmC,OAAO,sDAAQ,EAAE,GAAG,OAAO,sDAAQ,EAAE;AAC7E;;AAEA;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,uBAAuB,GAAG,+BAA+B;AACxF;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK,sBAAsB;AAC3B,KAAK,qBAAqB;AAC1B,KAAK,OAAO,4DAAc;AAC1B;AACA;AACA,oBAAoB,OAAO,yDAAW,oBAAoB;AAC1D,oBAAoB,OAAO,yDAAW,4BAA4B;AAClE,gBAAgB,OAAO,0DAAY,oBAAoB;AACvD,mBAAmB,OAAO,0DAAY,yBAAyB;AAC/D,wBAAwB,OAAO,0DAAY,yBAAyB;AACpE;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB,0BAA0B,4DAAY;AACtC;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA,cAAc,oCAAoC;AAClD;;AAEA;AACA;AACA,cAAc,oCAAoC;AAClD;;AAE4S;;AAE5S,2CAA2C,cAAc,26rF;;;;;;;;;;;ACn3CzD,2iGAA2iG,aAAa,sHAAsH,cAAc,+H;;;;;;;;;;;ACA5rG,siBAAsiB,gBAAgB,uF;;;;;;;;;;;ACAtjB,w8B;;;;;;;;;;;ACAA,ysD;;;;;;;;;;;;;;;;;;;;;ACA6D;AAO7D,IAAa,aAAa,GAA1B,MAAa,aAAa;IAL1B;QASE,kCAAkC;QAC3B,SAAI,GAAkB,CAAC,KAAK,EAAE,eAAe,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;QAClE,UAAK,GAAkB,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;IAuDpD,CAAC;IArDS,QAAQ,CAAC,EAAO,EAAE,IAAY;QACpC,OAAO,IAAI,MAAM,CAAC,YAAY,GAAG,IAAI,GAAG,YAAY,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;IAC3E,CAAC;IAEO,QAAQ,CAAC,EAAO,EAAE,IAAY;QACpC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE;YAC5B,EAAE,CAAC,SAAS,GAAG,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;SACrE;IACH,CAAC;IAEO,WAAW,CAAC,EAAO,EAAE,IAAY;QACvC,IAAI,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE;YAC3B,EAAE,CAAC,SAAS,GAAG,EAAE,CAAC,SAAS,CAAC,OAAO,CACjC,IAAI,MAAM,CAAC,YAAY,GAAG,IAAI,GAAG,YAAY,EAAE,GAAG,CAAC,EACnD,EAAE,CACH,CAAC;SACH;IACH,CAAC;IAEO,MAAM,CAAC,IAAS;QACtB,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;IAClC,CAAC;IAEO,MAAM,CAAC,IAAS;QACtB,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;IAC/B,CAAC;IAEO,MAAM,CAAC,IAAS;QACtB,MAAM,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;IAC/B,CAAC;IAEO,KAAK,CAAC,IAAS;QACrB,MAAM,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,WAAW,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;IAClC,CAAC;IAEO,WAAW,CAAC,IAAS;QAC3B,MAAM,CAAC,EAAE,EAAE,MAAM,EAAE,MAAM,CAAC,GAAG,IAAI,CAAC;QAClC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QAC5B,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAChB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACpB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACtB,CAAC;IAEO,aAAa,CAAC,IAAS;QAC7B,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,GAAG,IAAI,CAAC;QAC1B,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;QAC9B,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAChB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACtB,CAAC;CACF;AA7DY,aAAa;IALzB,+DAAS,CAAC;QACT,qKAAoC;QAEpC,aAAa,EAAE,+DAAiB,CAAC,IAAI;;KACtC,CAAC;GACW,aAAa,CA6DzB;AA7DyB;;;;;;;;;;;;ACP1B,8BAA8B,yCAAyC,uBAAuB,EAAE,sBAAsB,4CAA4C,oBAAoB,mBAAmB,oBAAoB,EAAE,+BAA+B,wBAAwB,qBAAqB,EAAE,+CAA+C,m4B;;;;;;;;;;;;;;;;;;;;;;;;ACAnS;AAIzD,IAAa,eAAe,GAA5B,MAAa,eAAe;IAE1B;QACE,IAAI,CAAC,QAAQ,GAAG,wCAAwC,CAAC;IAC3D,CAAC;IAED,eAAe,KAAI,CAAC;CACrB;AAPY,eAAe;IAH3B,+DAAS,CAAC;QACT,oKAAsC;KACvC,CAAC;;GACW,eAAe,CAO3B;AAP2B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJa;AACM;AACmB;AACX;AAEf;AACe;AACW;AACxB;AACE;AAEsB;AACN;AACK;AACL;AACC;AAsB7D,IAAa,oBAAoB,GAAjC,MAAa,oBAAoB;CAAI;AAAxB,oBAAoB;IApBhC,8DAAQ,CAAC;QACR,OAAO,EAAE;YACP,4DAAY;YACZ,4DAAY,CAAC,QAAQ,CAAC,8EAAqB,CAAC;YAC5C,0DAAW;YACX,kEAAmB;YACnB,uDAAY,CAAC,OAAO,EAAE;YACtB,qDAAW,CAAC,OAAO,EAAE;YACrB,oEAAS;YACT,yDAAa,CAAC,OAAO,EAAE;YACvB,+EAAyB;SAC1B;QAED,YAAY,EAAE;YACZ,yEAAe;YACf,8EAAe;YACf,yEAAe;YACf,0EAAa;SACd;KACF,CAAC;GACW,oBAAoB,CAAI;AAAJ;;;;;;;;;;;;;ACnCjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4D;AACK;AACL;AACC;AAEtD,MAAM,qBAAqB,GAAW;IAC3C;QACE,IAAI,EAAE,EAAE;QACR,QAAQ,EAAE;YACR;gBACE,IAAI,EAAE,QAAQ;gBACd,SAAS,EAAE,wEAAe;gBAC1B,IAAI,EAAE;oBACJ,KAAK,EAAE,qBAAqB;oBAC5B,IAAI,EAAE;wBACJ,EAAE,KAAK,EAAE,WAAW,EAAE,GAAG,EAAE,YAAY,EAAE;wBACzC,EAAE,KAAK,EAAE,aAAa,EAAE;qBACzB;iBACF;aACF;YACD;gBACE,IAAI,EAAE,QAAQ;gBACd,SAAS,EAAE,6EAAe;gBAC1B,IAAI,EAAE;oBACJ,KAAK,EAAE,aAAa;oBACpB,IAAI,EAAE;wBACJ,EAAE,KAAK,EAAE,WAAW,EAAE,GAAG,EAAE,YAAY,EAAE;wBACzC,EAAE,KAAK,EAAE,aAAa,EAAE;qBACzB;iBACF;aACF;YACD;gBACE,IAAI,EAAE,QAAQ;gBACd,SAAS,EAAE,wEAAe;gBAC1B,IAAI,EAAE;oBACJ,KAAK,EAAE,aAAa;oBACpB,IAAI,EAAE;wBACJ,EAAE,KAAK,EAAE,WAAW,EAAE,GAAG,EAAE,YAAY,EAAE;wBACzC,EAAE,KAAK,EAAE,aAAa,EAAE;qBACzB;iBACF;aACF;YACD;gBACE,IAAI,EAAE,WAAW;gBACjB,SAAS,EAAE,yEAAa;gBACxB,IAAI,EAAE;oBACJ,KAAK,EAAE,oBAAoB;oBAC3B,IAAI,EAAE;wBACJ,EAAE,KAAK,EAAE,WAAW,EAAE,GAAG,EAAE,YAAY,EAAE;wBACzC,EAAE,KAAK,EAAE,oBAAoB,EAAE;qBAChC;iBACF;aACF;SACF;KACF;CACF,CAAC;;;;;;;;;;;;;;;;;;;;;;ACzDmD;AAUrD,IAAa,eAAe,GAA5B,MAAa,eAAe;IAP5B;QAcE,UAAK,GAAG,WAAW,CAAC;QACpB,eAAU,GAAG;YACX,QAAQ,EAAE,IAAI;YACd,SAAS,EAAE;gBACT,GAAG,EAAE,oCAAoC;aAC1C;SACF,CAAC;QAEF,eAAU,GAAG;YACX,KAAK,EAAE,WAAW;YAClB,eAAe,EAAE,MAAM;YACvB,YAAY,EAAE,MAAM;YACpB,OAAO,EAAE,GAAG;YACZ,SAAS,EAAE;gBACT,GAAG,EAAE,oCAAoC;gBACzC,OAAO,EAAE;oBACP,cAAc,EAAE,qBAAqB;iBACtC;aACF;YACD,cAAc,EAAE,WAAW;YAC3B,QAAQ,EAAE,MAAM;SACjB,CAAC;QACF,eAAU,GAAG;YACX,KAAK,EAAE,WAAW;YAClB,eAAe,EAAE,IAAI;YACrB,YAAY,EAAE,IAAI;YAClB,aAAa,EAAE,IAAI;YACnB,OAAO,EAAE,GAAG;YACZ,SAAS,EAAE;gBACT,GAAG,EAAE,oCAAoC;aAC1C;YACD,cAAc,EAAE,WAAW;YAC3B,QAAQ,EAAE,IAAI;SACf,CAAC;IAaJ,CAAC;IAXC,SAAS,CAAC,GAAG;QACX,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACnB,CAAC;IAED,OAAO,CAAC,EAAE;QACR,gCAAgC;QAChC,6EAA6E;QAC7E,IAAI,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,eAAe,EAAE,CAAC;QACtC,4BAA4B;IAC9B,CAAC;CAEF;AArDY,eAAe;IAP3B,+DAAS,CAAC,aAAa,EAAE,EAAC,MAAM,EAAE,IAAI,EAAC,CAAC;IAGxC,+DAAS,CAAC;QACT,yKAAsC;;KAEvC,CAAC;GACW,eAAe,CAqD3B;AArD2B;;;;;;;;;;;;ACV5B,+DAA+D,2J;;;;;;;;;;;;;;;;;;;;;;;;;ACArB;AACC;AAK3C,IAAa,eAAe,GAA5B,MAAa,eAAe;IAC1B,YAAoB,MAAqB;QAArB,WAAM,GAAN,MAAM,CAAe;IAAG,CAAC;IAE7C,WAAW;QACT,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,kBAAkB,EAAE,UAAU,CAAC,CAAC;IACtD,CAAC;IAED,SAAS;QACP,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,mBAAmB,EAAE,OAAO,CAAC,CAAC;IAClD,CAAC;IAED,WAAW;QACT,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,uBAAuB,EAAE,QAAQ,CAAC,CAAC;IACzD,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;IACrD,CAAC;CACF;;YAjB6B,wDAAa;;AAD9B,eAAe;IAH3B,+DAAS,CAAC;QACT,oKAAsC;KACvC,CAAC;qCAE4B,wDAAa;GAD9B,eAAe,CAkB3B;AAlB2B","file":"extra-component-extra-component-module-es2015.js","sourcesContent":["import { Injectable, NgModule, Component, Input, Output, EventEmitter, defineInjectable } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass AngularFileUploaderService {\n    constructor() { }\n}\nAngularFileUploaderService.decorators = [\n    { type: Injectable, args: [{\n                providedIn: 'root'\n            },] },\n];\nAngularFileUploaderService.ctorParameters = () => [];\n/** @nocollapse */ AngularFileUploaderService.ngInjectableDef = defineInjectable({ factory: function AngularFileUploaderService_Factory() { return new AngularFileUploaderService(); }, token: AngularFileUploaderService, providedIn: \"root\" });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass AngularFileUploaderComponent {\n    constructor() {\n        this.config = {};\n        this.resetUpload = this.config[\"resetUpload\"];\n        this.ApiResponse = new EventEmitter();\n        this.idDate = +new Date();\n        this.reg = /(?:\\.([^.]+))?$/;\n        this.selectedFiles = [];\n        this.notAllowedList = [];\n        this.Caption = [];\n        this.singleFile = true;\n        this.progressBarShow = false;\n        this.uploadBtn = false;\n        this.uploadMsg = false;\n        this.afterUpload = false;\n        this.uploadClick = true;\n        //console.log(\"id: \",this.id);\n        //console.log(\"idDate: \",this.idDate);\n        //console.log(Math.random());\n    }\n    /**\n     * @param {?} rst\n     * @return {?}\n     */\n    ngOnChanges(rst) {\n        if (rst[\"config\"]) {\n            this.theme = this.config[\"theme\"] || \"\";\n            this.id =\n                this.config[\"id\"] ||\n                    parseInt((this.idDate / 10000).toString().split(\".\")[1]) +\n                        Math.floor(Math.random() * 20) * 10000;\n            this.hideProgressBar = this.config[\"hideProgressBar\"] || false;\n            this.hideResetBtn = this.config[\"hideResetBtn\"] || false;\n            this.hideSelectBtn = this.config[\"hideSelectBtn\"] || false;\n            this.maxSize = this.config[\"maxSize\"] || 20;\n            this.uploadAPI = this.config[\"uploadAPI\"][\"url\"];\n            this.formatsAllowed =\n                this.config[\"formatsAllowed\"] || \".jpg,.png,.pdf,.docx,.txt,.gif,.jpeg\";\n            this.multiple = this.config[\"multiple\"] || false;\n            this.headers = this.config[\"uploadAPI\"][\"headers\"] || {};\n            /** @type {?} */\n            let defaultReplaceTextsValues = {\n                selectFileBtn: this.multiple ? 'Select Files' : 'Select File',\n                resetBtn: 'Reset',\n                uploadBtn: 'Upload',\n                dragNDropBox: 'Drag N Drop',\n                attachPinBtn: this.multiple ? 'Attach Files...' : 'Attach File...',\n                afterUploadMsg_success: 'Successfully Uploaded !',\n                afterUploadMsg_error: 'Upload Failed !'\n            };\n            this.replaceTexts = Object.assign({}, defaultReplaceTextsValues);\n            if (this.config[\"replaceTexts\"]) {\n                this.replaceTexts = Object.assign({}, defaultReplaceTextsValues, this.config['replaceTexts']);\n            }\n            //console.log(\"config: \", this.config);\n            //console.log(this.config[\"maxSize\"]);\n            //console.log(this.headers);\n            //console.log(\"rst: \", rst);\n        }\n        if (rst[\"resetUpload\"]) {\n            if (rst[\"resetUpload\"].currentValue === true) {\n                this.resetFileUpload();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        //console.log(\"Id: \", this.id);\n        this.resetUpload = false;\n    }\n    /**\n     * @return {?}\n     */\n    resetFileUpload() {\n        this.selectedFiles = [];\n        this.Caption = [];\n        this.notAllowedList = [];\n        this.uploadMsg = false;\n        this.uploadBtn = false;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onChange(event) {\n        //console.log(this.maxSize + this.formatsAllowed + this.multiple);\n        this.notAllowedList = [];\n        //console.log(\"onchange hit\");\n        if (this.afterUpload || !this.multiple) {\n            this.selectedFiles = [];\n            this.Caption = [];\n            this.afterUpload = false;\n        }\n        //FORMATS ALLOWED LIST\n        //console.log(\"FORMATS ALLOWED LIST= \"+this.formatsAllowed);\n        //NO OF FORMATS ALLOWED\n        /** @type {?} */\n        let formatsCount;\n        formatsCount = this.formatsAllowed.match(new RegExp(\"\\\\.\", \"g\"));\n        formatsCount = formatsCount.length;\n        //console.log(\"NO OF FORMATS ALLOWED= \"+formatsCount);\n        //console.log(\"-------------------------------\");\n        //ITERATE SELECTED FILES\n        /** @type {?} */\n        let file;\n        if (event.type == \"drop\") {\n            file = event.dataTransfer.files;\n            //console.log(\"type: drop\");\n        }\n        else {\n            file = event.target.files || event.srcElement.files;\n            //console.log(\"type: change\");\n        }\n        //console.log(file);\n        /** @type {?} */\n        let currentFileExt;\n        /** @type {?} */\n        let ext;\n        /** @type {?} */\n        let frmtAllowed;\n        for (let i = 0; i < file.length; i++) {\n            //CHECK FORMAT\n            //CURRENT FILE EXTENSION\n            currentFileExt = this.reg.exec(file[i].name);\n            currentFileExt = currentFileExt[1];\n            //console.log(file[i].name);\n            frmtAllowed = false;\n            //FORMAT ALLOWED LIST ITERATE\n            for (let j = formatsCount; j > 0; j--) {\n                ext = this.formatsAllowed.split(\".\")[j];\n                //console.log(\"FORMAT LIST (\"+j+\")= \"+ext.split(\",\")[0]);\n                if (j == formatsCount) {\n                    ext = this.formatsAllowed.split(\".\")[j] + \",\";\n                } //check format\n                if (currentFileExt.toLowerCase() == ext.split(\",\")[0]) {\n                    frmtAllowed = true;\n                }\n            }\n            if (frmtAllowed) {\n                //console.log(\"FORMAT ALLOWED\");\n                //CHECK SIZE\n                if (file[i].size > this.maxSize * 1024000) {\n                    //console.log(\"SIZE NOT ALLOWED (\"+file[i].size+\")\");\n                    this.notAllowedList.push({\n                        fileName: file[i].name,\n                        fileSize: this.convertSize(file[i].size),\n                        errorMsg: \"Invalid size\"\n                    });\n                    continue;\n                }\n                else {\n                    //format allowed and size allowed then add file to selectedFile array\n                    this.selectedFiles.push(file[i]);\n                }\n            }\n            else {\n                //console.log(\"FORMAT NOT ALLOWED\");\n                this.notAllowedList.push({\n                    fileName: file[i].name,\n                    fileSize: this.convertSize(file[i].size),\n                    errorMsg: \"Invalid format\"\n                });\n                continue;\n            }\n        }\n        if (this.selectedFiles.length !== 0) {\n            this.uploadBtn = true;\n            if (this.theme == \"attachPin\")\n                this.uploadFiles();\n        }\n        else {\n            this.uploadBtn = false;\n        }\n        this.uploadMsg = false;\n        this.uploadClick = true;\n        this.percentComplete = 0;\n        event.target.value = null;\n    }\n    /**\n     * @return {?}\n     */\n    uploadFiles() {\n        //console.log(this.selectedFiles);\n        //console.log(this.selectedFiles);\n        /** @type {?} */\n        let i;\n        this.progressBarShow = true;\n        this.uploadClick = false;\n        this.notAllowedList = [];\n        /** @type {?} */\n        let isError = false;\n        /** @type {?} */\n        let xhr = new XMLHttpRequest();\n        /** @type {?} */\n        let formData = new FormData();\n        for (i = 0; i < this.selectedFiles.length; i++) {\n            if (this.Caption[i] == undefined)\n                this.Caption[i] = \"file\" + i;\n            //Add DATA TO BE SENT\n            formData.append(this.Caption[i], this.selectedFiles[i] /*, this.selectedFiles[i].name*/);\n            //console.log(this.selectedFiles[i]+\"{\"+this.Caption[i]+\" (Caption)}\");\n        }\n        if (i > 1) {\n            this.singleFile = false;\n        }\n        else {\n            this.singleFile = true;\n        }\n        xhr.onreadystatechange = evnt => {\n            //console.log(\"onready\");\n            if (xhr.readyState === 4) {\n                if (xhr.status !== 200 && xhr.status !== 201) {\n                    isError = true;\n                    this.progressBarShow = false;\n                    this.uploadBtn = false;\n                    this.uploadMsg = true;\n                    this.afterUpload = true;\n                    this.uploadMsgText = this.replaceTexts.afterUploadMsg_error;\n                    this.uploadMsgClass = \"text-danger lead\";\n                    //console.log(this.uploadMsgText);\n                    //console.log(evnt);\n                }\n                this.ApiResponse.emit(xhr);\n            }\n        };\n        xhr.upload.onprogress = evnt => {\n            this.uploadBtn = false; // button should be disabled by process uploading\n            if (evnt.lengthComputable) {\n                this.percentComplete = Math.round((evnt.loaded / evnt.total) * 100);\n            }\n            //console.log(\"Progress...\"/*+this.percentComplete+\" %\"*/);\n        };\n        xhr.onload = evnt => {\n            //console.log(\"onload\");\n            //console.log(evnt);\n            this.progressBarShow = false;\n            this.uploadBtn = false;\n            this.uploadMsg = true;\n            this.afterUpload = true;\n            if (!isError) {\n                this.uploadMsgText = this.replaceTexts.afterUploadMsg_success;\n                this.uploadMsgClass = \"text-success lead\";\n                //console.log(this.uploadMsgText + \" \" + this.selectedFiles.length + \" file\");\n            }\n        };\n        xhr.onerror = evnt => {\n            //console.log(\"onerror\");\n            //console.log(evnt);\n        };\n        xhr.open(\"POST\", this.uploadAPI, true);\n        for (const key of Object.keys(this.headers)) {\n            // Object.keys will give an Array of keys\n            xhr.setRequestHeader(key, this.headers[key]);\n        }\n        //let token = sessionStorage.getItem(\"token\");\n        //xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\n        //xhr.setRequestHeader('Authorization', `Bearer ${token}`);\n        xhr.send(formData);\n    }\n    /**\n     * @param {?} i\n     * @param {?} sf_na\n     * @return {?}\n     */\n    removeFile(i, sf_na) {\n        //console.log(\"remove file clicked \" + i)\n        if (sf_na == \"sf\") {\n            this.selectedFiles.splice(i, 1);\n            this.Caption.splice(i, 1);\n        }\n        else {\n            this.notAllowedList.splice(i, 1);\n        }\n        if (this.selectedFiles.length == 0) {\n            this.uploadBtn = false;\n        }\n    }\n    /**\n     * @param {?} fileSize\n     * @return {?}\n     */\n    convertSize(fileSize) {\n        //console.log(fileSize + \" - \"+ str);\n        return fileSize < 1024000\n            ? (fileSize / 1024).toFixed(2) + \" KB\"\n            : (fileSize / 1024000).toFixed(2) + \" MB\";\n    }\n    /**\n     * @return {?}\n     */\n    attachpinOnclick() {\n        //console.log(\"ID: \", this.id);\n        (/** @type {?} */ (document.getElementById(\"sel\" + this.id))).click();\n        //$(\"#\"+\"sel\"+this.id).click();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    drop(event) {\n        event.stopPropagation();\n        event.preventDefault();\n        //console.log(\"drop: \", event);\n        //console.log(\"drop: \", event.dataTransfer.files);\n        this.onChange(event);\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    allowDrop(event) {\n        event.stopPropagation();\n        event.preventDefault();\n        event.dataTransfer.dropEffect = \"copy\";\n        //console.log(\"allowDrop: \",event)\n    }\n}\nAngularFileUploaderComponent.decorators = [\n    { type: Component, args: [{\n                selector: \"angular-file-uploader\",\n                template: `<div class=\"container\" *ngIf=\"(theme !== 'attachPin')\" id=\"default\">\n\n    <!-- Drag n Drop theme Starts -->\n    <div *ngIf=\"theme == 'dragNDrop'\" id=\"dragNDrop\" [ngClass]=\"(hideSelectBtn && hideResetBtn) ? null : 'dragNDropBtmPad'\" class=\"dragNDrop\">\n        <div style=\"position:relative;\">\n            <div id=\"div1\" class=\"div1 afu-dragndrop-box\" (drop)=\"drop($event)\" (dragover)=\"allowDrop($event)\">\n                <p class=\"afu-dragndrop-text\">{{replaceTexts?.dragNDropBox}}</p>\n            </div>\n            <!-- <span class='label label-info' id=\"upload-file-info{{id}}\">{{selectedFiles[0]?.name}}</span> -->\n        </div>\n    </div>\n    <!-- Drag n Drop theme Ends -->\n\n    <label for=\"sel{{id}}\" class=\"btn btn-primary btn-sm afu-select-btn\" *ngIf=\"!hideSelectBtn\">{{replaceTexts?.selectFileBtn}}</label>\n    <input type=\"file\" id=\"sel{{id}}\" style=\"display: none\" *ngIf=\"!hideSelectBtn\" (change)=\"onChange($event)\" title=\"Select file\"\n        name=\"files[]\" [accept]=formatsAllowed [attr.multiple]=\"multiple ? '' : null\" />\n    <button class=\"btn btn-info btn-sm resetBtn afu-reset-btn\" (click)=\"resetFileUpload()\" *ngIf=\"!hideResetBtn\">{{replaceTexts?.resetBtn}}</button>\n    <br *ngIf=\"!hideSelectBtn\">\n    <p class=\"constraints-info afu-constraints-info\">({{formatsAllowed}}) Size limit- {{(convertSize(maxSize *1024000))}}</p>\n    <!--Selected file list-->\n    <div class=\"row afu-valid-file\" *ngFor=\"let sf of selectedFiles;let i=index\" >\n        <p class=\"col-xs-3 textOverflow\"><span class=\"text-primary\">{{sf.name}}</span></p>\n        <p class=\"col-xs-3 padMarg sizeC\"><strong>({{convertSize(sf.size)}})</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n        <!--  <input class=\"col-xs-3 progress caption\"  type=\"text\"  placeholder=\"Caption..\"  [(ngModel)]=\"Caption[i]\"  *ngIf=\"uploadClick\"/> -->\n        <div class=\"progress col-xs-3 padMarg afu-progress-bar\" *ngIf=\"singleFile && progressBarShow && !hideProgressBar\">\n            <span class=\"progress-bar progress-bar-success\" role=\"progressbar\" [ngStyle]=\"{'width':percentComplete+'%'}\">{{percentComplete}}%</span>\n        </div>\n        <a class=\"col-xs-1\" role=\"button\" (click)=\"removeFile(i,'sf')\" *ngIf=\"uploadClick\"><i class=\"fa fa-times\"></i></a>\n    </div>\n    <!--Invalid file list-->\n    <div class=\"row text-danger afu-invalid-file\" *ngFor=\"let na of notAllowedList;let j=index\">\n        <p class=\"col-xs-3 textOverflow\"><span>{{na['fileName']}}</span></p>\n        <p class=\"col-xs-3 padMarg sizeC\"><strong>({{na['fileSize']}})</strong></p>\n        <p class=\"col-xs-3 \">{{na['errorMsg']}}</p>\n        <a class=\"col-xs-1 delFileIcon\" role=\"button\" (click)=\"removeFile(j,'na')\" *ngIf=\"uploadClick\">&nbsp;<i class=\"fa fa-times\"></i></a>\n    </div>\n\n    <p *ngIf=\"uploadMsg\" class=\"{{uploadMsgClass}} + afu-upload-status\">{{uploadMsgText}}<p>\n    <div *ngIf=\"!singleFile && progressBarShow && !hideProgressBar\">\n        <div class=\"progress col-xs-4 padMarg afu-progress-bar\">\n            <span class=\"progress-bar progress-bar-success\" role=\"progressbar\" [ngStyle]=\"{'width':percentComplete+'%'}\">{{percentComplete}}%</span>\n        </div>\n        <br>\n        <br>\n    </div>\n    <button class=\"btn btn-success afu-upload-btn\" type=\"button\" (click)=\"uploadFiles()\" [disabled]=!uploadBtn>{{replaceTexts?.uploadBtn}}</button>\n    <br>\n</div>\n\n<!--/////////////////////////// ATTACH PIN THEME  //////////////////////////////////////////////////////////-->\n<div *ngIf=\"theme == 'attachPin'\" id=\"attachPin\">\n    <div style=\"position:relative;padding-left:6px\">\n        <a class='btn up_btn afu-attach-pin' (click)=\"attachpinOnclick()\">\n          {{replaceTexts?.attachPinBtn}}\n            <i class=\"fa fa-paperclip\" aria-hidden=\"true\"></i>\n            <!-- <p style=\"margin-top:10px\">({{formatsAllowed}}) Size limit- {{(convertSize(maxSize * 1024000))}}</p> -->\n            <input type=\"file\" id=\"sel{{id}}\" (change)=\"onChange($event)\" style=\"display: none\" title=\"Select file\" name=\"files[]\" [accept]=formatsAllowed\n                [attr.multiple]=\"multiple ? '' : null\" />\n            <br>\n        </a>\n        &nbsp;\n        <span class='label label-info' id=\"upload-file-info{{id}}\">{{selectedFiles[0]?.name}}</span>\n    </div>\n</div>\n\n<!--/////////////////////////// DRAG N DROP THEME  //////////////////////////////////////////////////////////-->\n<!-- <div *ngIf=\"theme == 'dragNDrop'\" id=\"dragNDrop\">\n  <div style=\"position:relative;padding-left:6px\">\n    <div id=\"div1\" (drop)=\"drop($event)\" (dragover)=\"allowDrop($event)\">\n      <p>Drag N Drop</p>\n    </div>\n    <span class='label label-info' id=\"upload-file-info{{id}}\">{{selectedFiles[0]?.name}}</span>\n  </div>\n</div> -->\n`,\n                styles: [`.constraints-info{margin-top:10px;font-style:italic}.padMarg{padding:0;margin-bottom:0}.caption{margin-right:5px}.textOverflow{white-space:nowrap;padding-right:0;overflow:hidden;text-overflow:ellipsis}.up_btn{color:#000;background-color:transparent;border:2px solid #5c5b5b;border-radius:22px}.delFileIcon{text-decoration:none;color:#ce0909}.dragNDrop .div1{display:border-box;border:2px dashed #5c5b5b;height:6rem;width:20rem}.dragNDrop .div1>p{text-align:center;font-weight:700;color:#5c5b5b;margin-top:1.4em}.dragNDropBtmPad{padding-bottom:2rem}@media screen and (max-width:620px){.caption{padding:0}}@media screen and (max-width:510px){.sizeC{width:25%}}@media screen and (max-width:260px){.caption,.sizeC{font-size:10px}}.resetBtn{margin-left:3px}`]\n            },] },\n];\nAngularFileUploaderComponent.ctorParameters = () => [];\nAngularFileUploaderComponent.propDecorators = {\n    config: [{ type: Input }],\n    resetUpload: [{ type: Input }],\n    ApiResponse: [{ type: Output }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass AngularFileUploaderModule {\n}\nAngularFileUploaderModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CommonModule\n                ],\n                declarations: [AngularFileUploaderComponent],\n                exports: [AngularFileUploaderComponent]\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { AngularFileUploaderService, AngularFileUploaderComponent, AngularFileUploaderModule };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1maWxlLXVwbG9hZGVyLmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9hbmd1bGFyLWZpbGUtdXBsb2FkZXIvbGliL2FuZ3VsYXItZmlsZS11cGxvYWRlci5zZXJ2aWNlLnRzIiwibmc6Ly9hbmd1bGFyLWZpbGUtdXBsb2FkZXIvbGliL2FuZ3VsYXItZmlsZS11cGxvYWRlci5jb21wb25lbnQudHMiLCJuZzovL2FuZ3VsYXItZmlsZS11cGxvYWRlci9saWIvYW5ndWxhci1maWxlLXVwbG9hZGVyLm1vZHVsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEFuZ3VsYXJGaWxlVXBsb2FkZXJTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3RvcigpIHsgfVxufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBJbmplY3QsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6IFwiYW5ndWxhci1maWxlLXVwbG9hZGVyXCIsXG4gIHRlbXBsYXRlOiBgPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiICpuZ0lmPVwiKHRoZW1lICE9PSAnYXR0YWNoUGluJylcIiBpZD1cImRlZmF1bHRcIj5cblxuICAgIDwhLS0gRHJhZyBuIERyb3AgdGhlbWUgU3RhcnRzIC0tPlxuICAgIDxkaXYgKm5nSWY9XCJ0aGVtZSA9PSAnZHJhZ05Ecm9wJ1wiIGlkPVwiZHJhZ05Ecm9wXCIgW25nQ2xhc3NdPVwiKGhpZGVTZWxlY3RCdG4gJiYgaGlkZVJlc2V0QnRuKSA/IG51bGwgOiAnZHJhZ05Ecm9wQnRtUGFkJ1wiIGNsYXNzPVwiZHJhZ05Ecm9wXCI+XG4gICAgICAgIDxkaXYgc3R5bGU9XCJwb3NpdGlvbjpyZWxhdGl2ZTtcIj5cbiAgICAgICAgICAgIDxkaXYgaWQ9XCJkaXYxXCIgY2xhc3M9XCJkaXYxIGFmdS1kcmFnbmRyb3AtYm94XCIgKGRyb3ApPVwiZHJvcCgkZXZlbnQpXCIgKGRyYWdvdmVyKT1cImFsbG93RHJvcCgkZXZlbnQpXCI+XG4gICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJhZnUtZHJhZ25kcm9wLXRleHRcIj57e3JlcGxhY2VUZXh0cz8uZHJhZ05Ecm9wQm94fX08L3A+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwhLS0gPHNwYW4gY2xhc3M9J2xhYmVsIGxhYmVsLWluZm8nIGlkPVwidXBsb2FkLWZpbGUtaW5mb3t7aWR9fVwiPnt7c2VsZWN0ZWRGaWxlc1swXT8ubmFtZX19PC9zcGFuPiAtLT5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPCEtLSBEcmFnIG4gRHJvcCB0aGVtZSBFbmRzIC0tPlxuXG4gICAgPGxhYmVsIGZvcj1cInNlbHt7aWR9fVwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5IGJ0bi1zbSBhZnUtc2VsZWN0LWJ0blwiICpuZ0lmPVwiIWhpZGVTZWxlY3RCdG5cIj57e3JlcGxhY2VUZXh0cz8uc2VsZWN0RmlsZUJ0bn19PC9sYWJlbD5cbiAgICA8aW5wdXQgdHlwZT1cImZpbGVcIiBpZD1cInNlbHt7aWR9fVwiIHN0eWxlPVwiZGlzcGxheTogbm9uZVwiICpuZ0lmPVwiIWhpZGVTZWxlY3RCdG5cIiAoY2hhbmdlKT1cIm9uQ2hhbmdlKCRldmVudClcIiB0aXRsZT1cIlNlbGVjdCBmaWxlXCJcbiAgICAgICAgbmFtZT1cImZpbGVzW11cIiBbYWNjZXB0XT1mb3JtYXRzQWxsb3dlZCBbYXR0ci5tdWx0aXBsZV09XCJtdWx0aXBsZSA/ICcnIDogbnVsbFwiIC8+XG4gICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4taW5mbyBidG4tc20gcmVzZXRCdG4gYWZ1LXJlc2V0LWJ0blwiIChjbGljayk9XCJyZXNldEZpbGVVcGxvYWQoKVwiICpuZ0lmPVwiIWhpZGVSZXNldEJ0blwiPnt7cmVwbGFjZVRleHRzPy5yZXNldEJ0bn19PC9idXR0b24+XG4gICAgPGJyICpuZ0lmPVwiIWhpZGVTZWxlY3RCdG5cIj5cbiAgICA8cCBjbGFzcz1cImNvbnN0cmFpbnRzLWluZm8gYWZ1LWNvbnN0cmFpbnRzLWluZm9cIj4oe3tmb3JtYXRzQWxsb3dlZH19KSBTaXplIGxpbWl0LSB7eyhjb252ZXJ0U2l6ZShtYXhTaXplICoxMDI0MDAwKSl9fTwvcD5cbiAgICA8IS0tU2VsZWN0ZWQgZmlsZSBsaXN0LS0+XG4gICAgPGRpdiBjbGFzcz1cInJvdyBhZnUtdmFsaWQtZmlsZVwiICpuZ0Zvcj1cImxldCBzZiBvZiBzZWxlY3RlZEZpbGVzO2xldCBpPWluZGV4XCIgPlxuICAgICAgICA8cCBjbGFzcz1cImNvbC14cy0zIHRleHRPdmVyZmxvd1wiPjxzcGFuIGNsYXNzPVwidGV4dC1wcmltYXJ5XCI+e3tzZi5uYW1lfX08L3NwYW4+PC9wPlxuICAgICAgICA8cCBjbGFzcz1cImNvbC14cy0zIHBhZE1hcmcgc2l6ZUNcIj48c3Ryb25nPih7e2NvbnZlcnRTaXplKHNmLnNpemUpfX0pPC9zdHJvbmc+Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7PC9wPlxuICAgICAgICA8IS0tICA8aW5wdXQgY2xhc3M9XCJjb2wteHMtMyBwcm9ncmVzcyBjYXB0aW9uXCIgIHR5cGU9XCJ0ZXh0XCIgIHBsYWNlaG9sZGVyPVwiQ2FwdGlvbi4uXCIgIFsobmdNb2RlbCldPVwiQ2FwdGlvbltpXVwiICAqbmdJZj1cInVwbG9hZENsaWNrXCIvPiAtLT5cbiAgICAgICAgPGRpdiBjbGFzcz1cInByb2dyZXNzIGNvbC14cy0zIHBhZE1hcmcgYWZ1LXByb2dyZXNzLWJhclwiICpuZ0lmPVwic2luZ2xlRmlsZSAmJiBwcm9ncmVzc0JhclNob3cgJiYgIWhpZGVQcm9ncmVzc0JhclwiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJwcm9ncmVzcy1iYXIgcHJvZ3Jlc3MtYmFyLXN1Y2Nlc3NcIiByb2xlPVwicHJvZ3Jlc3NiYXJcIiBbbmdTdHlsZV09XCJ7J3dpZHRoJzpwZXJjZW50Q29tcGxldGUrJyUnfVwiPnt7cGVyY2VudENvbXBsZXRlfX0lPC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGEgY2xhc3M9XCJjb2wteHMtMVwiIHJvbGU9XCJidXR0b25cIiAoY2xpY2spPVwicmVtb3ZlRmlsZShpLCdzZicpXCIgKm5nSWY9XCJ1cGxvYWRDbGlja1wiPjxpIGNsYXNzPVwiZmEgZmEtdGltZXNcIj48L2k+PC9hPlxuICAgIDwvZGl2PlxuICAgIDwhLS1JbnZhbGlkIGZpbGUgbGlzdC0tPlxuICAgIDxkaXYgY2xhc3M9XCJyb3cgdGV4dC1kYW5nZXIgYWZ1LWludmFsaWQtZmlsZVwiICpuZ0Zvcj1cImxldCBuYSBvZiBub3RBbGxvd2VkTGlzdDtsZXQgaj1pbmRleFwiPlxuICAgICAgICA8cCBjbGFzcz1cImNvbC14cy0zIHRleHRPdmVyZmxvd1wiPjxzcGFuPnt7bmFbJ2ZpbGVOYW1lJ119fTwvc3Bhbj48L3A+XG4gICAgICAgIDxwIGNsYXNzPVwiY29sLXhzLTMgcGFkTWFyZyBzaXplQ1wiPjxzdHJvbmc+KHt7bmFbJ2ZpbGVTaXplJ119fSk8L3N0cm9uZz48L3A+XG4gICAgICAgIDxwIGNsYXNzPVwiY29sLXhzLTMgXCI+e3tuYVsnZXJyb3JNc2cnXX19PC9wPlxuICAgICAgICA8YSBjbGFzcz1cImNvbC14cy0xIGRlbEZpbGVJY29uXCIgcm9sZT1cImJ1dHRvblwiIChjbGljayk9XCJyZW1vdmVGaWxlKGosJ25hJylcIiAqbmdJZj1cInVwbG9hZENsaWNrXCI+Jm5ic3A7PGkgY2xhc3M9XCJmYSBmYS10aW1lc1wiPjwvaT48L2E+XG4gICAgPC9kaXY+XG5cbiAgICA8cCAqbmdJZj1cInVwbG9hZE1zZ1wiIGNsYXNzPVwie3t1cGxvYWRNc2dDbGFzc319ICsgYWZ1LXVwbG9hZC1zdGF0dXNcIj57e3VwbG9hZE1zZ1RleHR9fTxwPlxuICAgIDxkaXYgKm5nSWY9XCIhc2luZ2xlRmlsZSAmJiBwcm9ncmVzc0JhclNob3cgJiYgIWhpZGVQcm9ncmVzc0JhclwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwicHJvZ3Jlc3MgY29sLXhzLTQgcGFkTWFyZyBhZnUtcHJvZ3Jlc3MtYmFyXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInByb2dyZXNzLWJhciBwcm9ncmVzcy1iYXItc3VjY2Vzc1wiIHJvbGU9XCJwcm9ncmVzc2JhclwiIFtuZ1N0eWxlXT1cInsnd2lkdGgnOnBlcmNlbnRDb21wbGV0ZSsnJSd9XCI+e3twZXJjZW50Q29tcGxldGV9fSU8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8YnI+XG4gICAgICAgIDxicj5cbiAgICA8L2Rpdj5cbiAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1zdWNjZXNzIGFmdS11cGxvYWQtYnRuXCIgdHlwZT1cImJ1dHRvblwiIChjbGljayk9XCJ1cGxvYWRGaWxlcygpXCIgW2Rpc2FibGVkXT0hdXBsb2FkQnRuPnt7cmVwbGFjZVRleHRzPy51cGxvYWRCdG59fTwvYnV0dG9uPlxuICAgIDxicj5cbjwvZGl2PlxuXG48IS0tLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vIEFUVEFDSCBQSU4gVEhFTUUgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8tLT5cbjxkaXYgKm5nSWY9XCJ0aGVtZSA9PSAnYXR0YWNoUGluJ1wiIGlkPVwiYXR0YWNoUGluXCI+XG4gICAgPGRpdiBzdHlsZT1cInBvc2l0aW9uOnJlbGF0aXZlO3BhZGRpbmctbGVmdDo2cHhcIj5cbiAgICAgICAgPGEgY2xhc3M9J2J0biB1cF9idG4gYWZ1LWF0dGFjaC1waW4nIChjbGljayk9XCJhdHRhY2hwaW5PbmNsaWNrKClcIj5cbiAgICAgICAgICB7e3JlcGxhY2VUZXh0cz8uYXR0YWNoUGluQnRufX1cbiAgICAgICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtcGFwZXJjbGlwXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxuICAgICAgICAgICAgPCEtLSA8cCBzdHlsZT1cIm1hcmdpbi10b3A6MTBweFwiPih7e2Zvcm1hdHNBbGxvd2VkfX0pIFNpemUgbGltaXQtIHt7KGNvbnZlcnRTaXplKG1heFNpemUgKiAxMDI0MDAwKSl9fTwvcD4gLS0+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cImZpbGVcIiBpZD1cInNlbHt7aWR9fVwiIChjaGFuZ2UpPVwib25DaGFuZ2UoJGV2ZW50KVwiIHN0eWxlPVwiZGlzcGxheTogbm9uZVwiIHRpdGxlPVwiU2VsZWN0IGZpbGVcIiBuYW1lPVwiZmlsZXNbXVwiIFthY2NlcHRdPWZvcm1hdHNBbGxvd2VkXG4gICAgICAgICAgICAgICAgW2F0dHIubXVsdGlwbGVdPVwibXVsdGlwbGUgPyAnJyA6IG51bGxcIiAvPlxuICAgICAgICAgICAgPGJyPlxuICAgICAgICA8L2E+XG4gICAgICAgICZuYnNwO1xuICAgICAgICA8c3BhbiBjbGFzcz0nbGFiZWwgbGFiZWwtaW5mbycgaWQ9XCJ1cGxvYWQtZmlsZS1pbmZve3tpZH19XCI+e3tzZWxlY3RlZEZpbGVzWzBdPy5uYW1lfX08L3NwYW4+XG4gICAgPC9kaXY+XG48L2Rpdj5cblxuPCEtLS8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLyBEUkFHIE4gRFJPUCBUSEVNRSAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy0tPlxuPCEtLSA8ZGl2ICpuZ0lmPVwidGhlbWUgPT0gJ2RyYWdORHJvcCdcIiBpZD1cImRyYWdORHJvcFwiPlxuICA8ZGl2IHN0eWxlPVwicG9zaXRpb246cmVsYXRpdmU7cGFkZGluZy1sZWZ0OjZweFwiPlxuICAgIDxkaXYgaWQ9XCJkaXYxXCIgKGRyb3ApPVwiZHJvcCgkZXZlbnQpXCIgKGRyYWdvdmVyKT1cImFsbG93RHJvcCgkZXZlbnQpXCI+XG4gICAgICA8cD5EcmFnIE4gRHJvcDwvcD5cbiAgICA8L2Rpdj5cbiAgICA8c3BhbiBjbGFzcz0nbGFiZWwgbGFiZWwtaW5mbycgaWQ9XCJ1cGxvYWQtZmlsZS1pbmZve3tpZH19XCI+e3tzZWxlY3RlZEZpbGVzWzBdPy5uYW1lfX08L3NwYW4+XG4gIDwvZGl2PlxuPC9kaXY+IC0tPlxuYCAsXG4gIHN0eWxlczogW2AuY29uc3RyYWludHMtaW5mb3ttYXJnaW4tdG9wOjEwcHg7Zm9udC1zdHlsZTppdGFsaWN9LnBhZE1hcmd7cGFkZGluZzowO21hcmdpbi1ib3R0b206MH0uY2FwdGlvbnttYXJnaW4tcmlnaHQ6NXB4fS50ZXh0T3ZlcmZsb3d7d2hpdGUtc3BhY2U6bm93cmFwO3BhZGRpbmctcmlnaHQ6MDtvdmVyZmxvdzpoaWRkZW47dGV4dC1vdmVyZmxvdzplbGxpcHNpc30udXBfYnRue2NvbG9yOiMwMDA7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDtib3JkZXI6MnB4IHNvbGlkICM1YzViNWI7Ym9yZGVyLXJhZGl1czoyMnB4fS5kZWxGaWxlSWNvbnt0ZXh0LWRlY29yYXRpb246bm9uZTtjb2xvcjojY2UwOTA5fS5kcmFnTkRyb3AgLmRpdjF7ZGlzcGxheTpib3JkZXItYm94O2JvcmRlcjoycHggZGFzaGVkICM1YzViNWI7aGVpZ2h0OjZyZW07d2lkdGg6MjByZW19LmRyYWdORHJvcCAuZGl2MT5we3RleHQtYWxpZ246Y2VudGVyO2ZvbnQtd2VpZ2h0OjcwMDtjb2xvcjojNWM1YjViO21hcmdpbi10b3A6MS40ZW19LmRyYWdORHJvcEJ0bVBhZHtwYWRkaW5nLWJvdHRvbToycmVtfUBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6NjIwcHgpey5jYXB0aW9ue3BhZGRpbmc6MH19QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDo1MTBweCl7LnNpemVDe3dpZHRoOjI1JX19QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDoyNjBweCl7LmNhcHRpb24sLnNpemVDe2ZvbnQtc2l6ZToxMHB4fX0ucmVzZXRCdG57bWFyZ2luLWxlZnQ6M3B4fWBdXG59KVxuZXhwb3J0IGNsYXNzIEFuZ3VsYXJGaWxlVXBsb2FkZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gIEBJbnB1dCgpXG4gIGNvbmZpZzogYW55ID0ge307XG4gIEBJbnB1dCgpXG4gIHJlc2V0VXBsb2FkOiBib29sZWFuID0gdGhpcy5jb25maWdbXCJyZXNldFVwbG9hZFwiXTtcbiAgQE91dHB1dCgpXG4gIEFwaVJlc3BvbnNlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIHRoZW1lOiBzdHJpbmc7XG4gIGlkOiBudW1iZXI7XG4gIGhpZGVQcm9ncmVzc0JhcjogYm9vbGVhbjtcbiAgbWF4U2l6ZTogbnVtYmVyO1xuICB1cGxvYWRBUEk6IHN0cmluZztcbiAgZm9ybWF0c0FsbG93ZWQ6IHN0cmluZztcbiAgbXVsdGlwbGU6IGJvb2xlYW47XG4gIGhlYWRlcnM6IGFueTtcbiAgaGlkZVJlc2V0QnRuOiBib29sZWFuO1xuICBoaWRlU2VsZWN0QnRuOiBib29sZWFuO1xuXG4gIGlkRGF0ZTogbnVtYmVyID0gK25ldyBEYXRlKCk7XG4gIHJlZzogUmVnRXhwID0gLyg/OlxcLihbXi5dKykpPyQvO1xuICBzZWxlY3RlZEZpbGVzOiBBcnJheTxhbnk+ID0gW107XG4gIG5vdEFsbG93ZWRMaXN0OiBBcnJheTxPYmplY3Q+ID0gW107XG4gIENhcHRpb246IEFycmF5PHN0cmluZz4gPSBbXTtcbiAgc2luZ2xlRmlsZSA9IHRydWU7XG4gIHByb2dyZXNzQmFyU2hvdyA9IGZhbHNlO1xuICB1cGxvYWRCdG4gPSBmYWxzZTtcbiAgdXBsb2FkTXNnID0gZmFsc2U7XG4gIGFmdGVyVXBsb2FkID0gZmFsc2U7XG4gIHVwbG9hZENsaWNrID0gdHJ1ZTtcbiAgdXBsb2FkTXNnVGV4dDogc3RyaW5nO1xuICB1cGxvYWRNc2dDbGFzczogc3RyaW5nO1xuICBwZXJjZW50Q29tcGxldGU6IG51bWJlcjtcbiAgcmVwbGFjZVRleHRzO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIC8vY29uc29sZS5sb2coXCJpZDogXCIsdGhpcy5pZCk7XG4gICAgLy9jb25zb2xlLmxvZyhcImlkRGF0ZTogXCIsdGhpcy5pZERhdGUpO1xuICAgIC8vY29uc29sZS5sb2coTWF0aC5yYW5kb20oKSk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhyc3Q6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAocnN0W1wiY29uZmlnXCJdKSB7XG4gICAgICB0aGlzLnRoZW1lID0gdGhpcy5jb25maWdbXCJ0aGVtZVwiXSB8fCBcIlwiO1xuICAgICAgdGhpcy5pZCA9XG4gICAgICAgIHRoaXMuY29uZmlnW1wiaWRcIl0gfHxcbiAgICAgICAgcGFyc2VJbnQoKHRoaXMuaWREYXRlIC8gMTAwMDApLnRvU3RyaW5nKCkuc3BsaXQoXCIuXCIpWzFdKSArXG4gICAgICAgICAgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjApICogMTAwMDA7XG4gICAgICB0aGlzLmhpZGVQcm9ncmVzc0JhciA9IHRoaXMuY29uZmlnW1wiaGlkZVByb2dyZXNzQmFyXCJdIHx8IGZhbHNlO1xuICAgICAgdGhpcy5oaWRlUmVzZXRCdG4gPSB0aGlzLmNvbmZpZ1tcImhpZGVSZXNldEJ0blwiXSB8fCBmYWxzZTtcbiAgICAgIHRoaXMuaGlkZVNlbGVjdEJ0biA9IHRoaXMuY29uZmlnW1wiaGlkZVNlbGVjdEJ0blwiXSB8fCBmYWxzZTtcbiAgICAgIHRoaXMubWF4U2l6ZSA9IHRoaXMuY29uZmlnW1wibWF4U2l6ZVwiXSB8fCAyMDtcbiAgICAgIHRoaXMudXBsb2FkQVBJID0gdGhpcy5jb25maWdbXCJ1cGxvYWRBUElcIl1bXCJ1cmxcIl07XG4gICAgICB0aGlzLmZvcm1hdHNBbGxvd2VkID1cbiAgICAgICAgdGhpcy5jb25maWdbXCJmb3JtYXRzQWxsb3dlZFwiXSB8fCBcIi5qcGcsLnBuZywucGRmLC5kb2N4LC50eHQsLmdpZiwuanBlZ1wiO1xuICAgICAgdGhpcy5tdWx0aXBsZSA9IHRoaXMuY29uZmlnW1wibXVsdGlwbGVcIl0gfHwgZmFsc2U7XG4gICAgICB0aGlzLmhlYWRlcnMgPSB0aGlzLmNvbmZpZ1tcInVwbG9hZEFQSVwiXVtcImhlYWRlcnNcIl0gfHwge307XG4gICAgICBsZXQgZGVmYXVsdFJlcGxhY2VUZXh0c1ZhbHVlczogUmVwbGFjZVRleHRzID0gIHtcbiAgICAgICAgc2VsZWN0RmlsZUJ0bjogdGhpcy5tdWx0aXBsZSA/ICdTZWxlY3QgRmlsZXMnIDogJ1NlbGVjdCBGaWxlJyxcbiAgICAgICAgcmVzZXRCdG46ICdSZXNldCcsXG4gICAgICAgIHVwbG9hZEJ0bjogJ1VwbG9hZCcsXG4gICAgICAgIGRyYWdORHJvcEJveDogJ0RyYWcgTiBEcm9wJyxcbiAgICAgICAgYXR0YWNoUGluQnRuOiB0aGlzLm11bHRpcGxlID8gJ0F0dGFjaCBGaWxlcy4uLicgOiAnQXR0YWNoIEZpbGUuLi4nLFxuICAgICAgICBhZnRlclVwbG9hZE1zZ19zdWNjZXNzOiAnU3VjY2Vzc2Z1bGx5IFVwbG9hZGVkICEnLFxuICAgICAgICBhZnRlclVwbG9hZE1zZ19lcnJvcjogJ1VwbG9hZCBGYWlsZWQgISdcbiAgICAgIH07XG4gICAgICB0aGlzLnJlcGxhY2VUZXh0cyA9IHsuLi5kZWZhdWx0UmVwbGFjZVRleHRzVmFsdWVzfTtcbiAgICAgIGlmKHRoaXMuY29uZmlnW1wicmVwbGFjZVRleHRzXCJdKSB7XG4gICAgICAgIHRoaXMucmVwbGFjZVRleHRzID0ge1xuICAgICAgICAgIC4uLmRlZmF1bHRSZXBsYWNlVGV4dHNWYWx1ZXMsXG4gICAgICAgICAgLi4udGhpcy5jb25maWdbJ3JlcGxhY2VUZXh0cyddXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy9jb25zb2xlLmxvZyhcImNvbmZpZzogXCIsIHRoaXMuY29uZmlnKTtcbiAgICAgIC8vY29uc29sZS5sb2codGhpcy5jb25maWdbXCJtYXhTaXplXCJdKTtcbiAgICAgIC8vY29uc29sZS5sb2codGhpcy5oZWFkZXJzKTtcbiAgICAgIC8vY29uc29sZS5sb2coXCJyc3Q6IFwiLCByc3QpO1xuICAgIH1cblxuICAgIGlmIChyc3RbXCJyZXNldFVwbG9hZFwiXSkge1xuICAgICAgaWYgKHJzdFtcInJlc2V0VXBsb2FkXCJdLmN1cnJlbnRWYWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgICB0aGlzLnJlc2V0RmlsZVVwbG9hZCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIC8vY29uc29sZS5sb2coXCJJZDogXCIsIHRoaXMuaWQpO1xuICAgIHRoaXMucmVzZXRVcGxvYWQgPSBmYWxzZTtcbiAgfVxuXG4gIHJlc2V0RmlsZVVwbG9hZCgpIHtcbiAgICB0aGlzLnNlbGVjdGVkRmlsZXMgPSBbXTtcbiAgICB0aGlzLkNhcHRpb24gPSBbXTtcbiAgICB0aGlzLm5vdEFsbG93ZWRMaXN0ID0gW107XG4gICAgdGhpcy51cGxvYWRNc2cgPSBmYWxzZTtcbiAgICB0aGlzLnVwbG9hZEJ0biA9IGZhbHNlO1xuICB9XG5cbiAgb25DaGFuZ2UoZXZlbnQ6IGFueSkge1xuICAgIC8vY29uc29sZS5sb2codGhpcy5tYXhTaXplICsgdGhpcy5mb3JtYXRzQWxsb3dlZCArIHRoaXMubXVsdGlwbGUpO1xuICAgIHRoaXMubm90QWxsb3dlZExpc3QgPSBbXTtcbiAgICAvL2NvbnNvbGUubG9nKFwib25jaGFuZ2UgaGl0XCIpO1xuICAgIGlmICh0aGlzLmFmdGVyVXBsb2FkIHx8ICF0aGlzLm11bHRpcGxlKSB7XG4gICAgICB0aGlzLnNlbGVjdGVkRmlsZXMgPSBbXTtcbiAgICAgIHRoaXMuQ2FwdGlvbiA9IFtdO1xuICAgICAgdGhpcy5hZnRlclVwbG9hZCA9IGZhbHNlO1xuICAgIH1cbiAgICAvL0ZPUk1BVFMgQUxMT1dFRCBMSVNUXG4gICAgLy9jb25zb2xlLmxvZyhcIkZPUk1BVFMgQUxMT1dFRCBMSVNUPSBcIit0aGlzLmZvcm1hdHNBbGxvd2VkKTtcbiAgICAvL05PIE9GIEZPUk1BVFMgQUxMT1dFRFxuICAgIGxldCBmb3JtYXRzQ291bnQ6IGFueTtcbiAgICBmb3JtYXRzQ291bnQgPSB0aGlzLmZvcm1hdHNBbGxvd2VkLm1hdGNoKG5ldyBSZWdFeHAoXCJcXFxcLlwiLCBcImdcIikpO1xuICAgIGZvcm1hdHNDb3VudCA9IGZvcm1hdHNDb3VudC5sZW5ndGg7XG4gICAgLy9jb25zb2xlLmxvZyhcIk5PIE9GIEZPUk1BVFMgQUxMT1dFRD0gXCIrZm9ybWF0c0NvdW50KTtcbiAgICAvL2NvbnNvbGUubG9nKFwiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVwiKTtcblxuICAgIC8vSVRFUkFURSBTRUxFQ1RFRCBGSUxFU1xuICAgIGxldCBmaWxlOiBGaWxlTGlzdDtcbiAgICBpZiAoZXZlbnQudHlwZSA9PSBcImRyb3BcIikge1xuICAgICAgZmlsZSA9IGV2ZW50LmRhdGFUcmFuc2Zlci5maWxlcztcbiAgICAgIC8vY29uc29sZS5sb2coXCJ0eXBlOiBkcm9wXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmaWxlID0gZXZlbnQudGFyZ2V0LmZpbGVzIHx8IGV2ZW50LnNyY0VsZW1lbnQuZmlsZXM7XG4gICAgICAvL2NvbnNvbGUubG9nKFwidHlwZTogY2hhbmdlXCIpO1xuICAgIH1cbiAgICAvL2NvbnNvbGUubG9nKGZpbGUpO1xuICAgIGxldCBjdXJyZW50RmlsZUV4dDogYW55O1xuICAgIGxldCBleHQ6IGFueTtcbiAgICBsZXQgZnJtdEFsbG93ZWQ6IGJvb2xlYW47XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWxlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAvL0NIRUNLIEZPUk1BVFxuICAgICAgLy9DVVJSRU5UIEZJTEUgRVhURU5TSU9OXG4gICAgICBjdXJyZW50RmlsZUV4dCA9IHRoaXMucmVnLmV4ZWMoZmlsZVtpXS5uYW1lKTtcbiAgICAgIGN1cnJlbnRGaWxlRXh0ID0gY3VycmVudEZpbGVFeHRbMV07XG4gICAgICAvL2NvbnNvbGUubG9nKGZpbGVbaV0ubmFtZSk7XG4gICAgICBmcm10QWxsb3dlZCA9IGZhbHNlO1xuICAgICAgLy9GT1JNQVQgQUxMT1dFRCBMSVNUIElURVJBVEVcbiAgICAgIGZvciAobGV0IGogPSBmb3JtYXRzQ291bnQ7IGogPiAwOyBqLS0pIHtcbiAgICAgICAgZXh0ID0gdGhpcy5mb3JtYXRzQWxsb3dlZC5zcGxpdChcIi5cIilbal07XG4gICAgICAgIC8vY29uc29sZS5sb2coXCJGT1JNQVQgTElTVCAoXCIraitcIik9IFwiK2V4dC5zcGxpdChcIixcIilbMF0pO1xuICAgICAgICBpZiAoaiA9PSBmb3JtYXRzQ291bnQpIHtcbiAgICAgICAgICBleHQgPSB0aGlzLmZvcm1hdHNBbGxvd2VkLnNwbGl0KFwiLlwiKVtqXSArIFwiLFwiO1xuICAgICAgICB9IC8vY2hlY2sgZm9ybWF0XG4gICAgICAgIGlmIChjdXJyZW50RmlsZUV4dC50b0xvd2VyQ2FzZSgpID09IGV4dC5zcGxpdChcIixcIilbMF0pIHtcbiAgICAgICAgICBmcm10QWxsb3dlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZybXRBbGxvd2VkKSB7XG4gICAgICAgIC8vY29uc29sZS5sb2coXCJGT1JNQVQgQUxMT1dFRFwiKTtcbiAgICAgICAgLy9DSEVDSyBTSVpFXG4gICAgICAgIGlmIChmaWxlW2ldLnNpemUgPiB0aGlzLm1heFNpemUgKiAxMDI0MDAwKSB7XG4gICAgICAgICAgLy9jb25zb2xlLmxvZyhcIlNJWkUgTk9UIEFMTE9XRUQgKFwiK2ZpbGVbaV0uc2l6ZStcIilcIik7XG4gICAgICAgICAgdGhpcy5ub3RBbGxvd2VkTGlzdC5wdXNoKHtcbiAgICAgICAgICAgIGZpbGVOYW1lOiBmaWxlW2ldLm5hbWUsXG4gICAgICAgICAgICBmaWxlU2l6ZTogdGhpcy5jb252ZXJ0U2l6ZShmaWxlW2ldLnNpemUpLFxuICAgICAgICAgICAgZXJyb3JNc2c6IFwiSW52YWxpZCBzaXplXCJcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvL2Zvcm1hdCBhbGxvd2VkIGFuZCBzaXplIGFsbG93ZWQgdGhlbiBhZGQgZmlsZSB0byBzZWxlY3RlZEZpbGUgYXJyYXlcbiAgICAgICAgICB0aGlzLnNlbGVjdGVkRmlsZXMucHVzaChmaWxlW2ldKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcIkZPUk1BVCBOT1QgQUxMT1dFRFwiKTtcbiAgICAgICAgdGhpcy5ub3RBbGxvd2VkTGlzdC5wdXNoKHtcbiAgICAgICAgICBmaWxlTmFtZTogZmlsZVtpXS5uYW1lLFxuICAgICAgICAgIGZpbGVTaXplOiB0aGlzLmNvbnZlcnRTaXplKGZpbGVbaV0uc2l6ZSksXG4gICAgICAgICAgZXJyb3JNc2c6IFwiSW52YWxpZCBmb3JtYXRcIlxuICAgICAgICB9KTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc2VsZWN0ZWRGaWxlcy5sZW5ndGggIT09IDApIHtcbiAgICAgIHRoaXMudXBsb2FkQnRuID0gdHJ1ZTtcbiAgICAgIGlmICh0aGlzLnRoZW1lID09IFwiYXR0YWNoUGluXCIpIHRoaXMudXBsb2FkRmlsZXMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy51cGxvYWRCdG4gPSBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy51cGxvYWRNc2cgPSBmYWxzZTtcbiAgICB0aGlzLnVwbG9hZENsaWNrID0gdHJ1ZTtcbiAgICB0aGlzLnBlcmNlbnRDb21wbGV0ZSA9IDA7XG4gICAgZXZlbnQudGFyZ2V0LnZhbHVlID0gbnVsbDtcbiAgfVxuXG4gIHVwbG9hZEZpbGVzKCkge1xuICAgIC8vY29uc29sZS5sb2codGhpcy5zZWxlY3RlZEZpbGVzKTtcblxuICAgIGxldCBpOiBhbnk7XG4gICAgdGhpcy5wcm9ncmVzc0JhclNob3cgPSB0cnVlO1xuICAgIHRoaXMudXBsb2FkQ2xpY2sgPSBmYWxzZTtcbiAgICB0aGlzLm5vdEFsbG93ZWRMaXN0ID0gW107XG4gICAgbGV0IGlzRXJyb3IgPSBmYWxzZTtcblxuICAgIGxldCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICBsZXQgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLnNlbGVjdGVkRmlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLkNhcHRpb25baV0gPT0gdW5kZWZpbmVkKVxuICAgICAgICB0aGlzLkNhcHRpb25baV0gPSBcImZpbGVcIiArIGk7XG4gICAgICAvL0FkZCBEQVRBIFRPIEJFIFNFTlRcbiAgICAgIGZvcm1EYXRhLmFwcGVuZChcbiAgICAgICAgdGhpcy5DYXB0aW9uW2ldLFxuICAgICAgICB0aGlzLnNlbGVjdGVkRmlsZXNbaV0gLyosIHRoaXMuc2VsZWN0ZWRGaWxlc1tpXS5uYW1lKi9cbiAgICAgICk7XG4gICAgICAvL2NvbnNvbGUubG9nKHRoaXMuc2VsZWN0ZWRGaWxlc1tpXStcIntcIit0aGlzLkNhcHRpb25baV0rXCIgKENhcHRpb24pfVwiKTtcbiAgICB9XG5cbiAgICBpZiAoaSA+IDEpIHtcbiAgICAgIHRoaXMuc2luZ2xlRmlsZSA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNpbmdsZUZpbGUgPSB0cnVlO1xuICAgIH1cblxuICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBldm50ID0+IHtcbiAgICAgIC8vY29uc29sZS5sb2coXCJvbnJlYWR5XCIpO1xuICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgIGlmICh4aHIuc3RhdHVzICE9PSAyMDAgJiYgeGhyLnN0YXR1cyAhPT0gMjAxKSB7XG4gICAgICAgICAgaXNFcnJvciA9IHRydWU7XG4gICAgICAgICAgdGhpcy5wcm9ncmVzc0JhclNob3cgPSBmYWxzZTtcbiAgICAgICAgICB0aGlzLnVwbG9hZEJ0biA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMudXBsb2FkTXNnID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLmFmdGVyVXBsb2FkID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLnVwbG9hZE1zZ1RleHQgPSB0aGlzLnJlcGxhY2VUZXh0cy5hZnRlclVwbG9hZE1zZ19lcnJvcjtcbiAgICAgICAgICB0aGlzLnVwbG9hZE1zZ0NsYXNzID0gXCJ0ZXh0LWRhbmdlciBsZWFkXCI7XG4gICAgICAgICAgLy9jb25zb2xlLmxvZyh0aGlzLnVwbG9hZE1zZ1RleHQpO1xuICAgICAgICAgIC8vY29uc29sZS5sb2coZXZudCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5BcGlSZXNwb25zZS5lbWl0KHhocik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHhoci51cGxvYWQub25wcm9ncmVzcyA9IGV2bnQgPT4ge1xuICAgICAgdGhpcy51cGxvYWRCdG4gPSBmYWxzZTsgLy8gYnV0dG9uIHNob3VsZCBiZSBkaXNhYmxlZCBieSBwcm9jZXNzIHVwbG9hZGluZ1xuICAgICAgaWYgKGV2bnQubGVuZ3RoQ29tcHV0YWJsZSkge1xuICAgICAgICB0aGlzLnBlcmNlbnRDb21wbGV0ZSA9IE1hdGgucm91bmQoKGV2bnQubG9hZGVkIC8gZXZudC50b3RhbCkgKiAxMDApO1xuICAgICAgfVxuICAgICAgLy9jb25zb2xlLmxvZyhcIlByb2dyZXNzLi4uXCIvKit0aGlzLnBlcmNlbnRDb21wbGV0ZStcIiAlXCIqLyk7XG4gICAgfTtcblxuICAgIHhoci5vbmxvYWQgPSBldm50ID0+IHtcbiAgICAgIC8vY29uc29sZS5sb2coXCJvbmxvYWRcIik7XG4gICAgICAvL2NvbnNvbGUubG9nKGV2bnQpO1xuICAgICAgdGhpcy5wcm9ncmVzc0JhclNob3cgPSBmYWxzZTtcbiAgICAgIHRoaXMudXBsb2FkQnRuID0gZmFsc2U7XG4gICAgICB0aGlzLnVwbG9hZE1zZyA9IHRydWU7XG4gICAgICB0aGlzLmFmdGVyVXBsb2FkID0gdHJ1ZTtcbiAgICAgIGlmICghaXNFcnJvcikge1xuICAgICAgICB0aGlzLnVwbG9hZE1zZ1RleHQgPSB0aGlzLnJlcGxhY2VUZXh0cy5hZnRlclVwbG9hZE1zZ19zdWNjZXNzO1xuICAgICAgICB0aGlzLnVwbG9hZE1zZ0NsYXNzID0gXCJ0ZXh0LXN1Y2Nlc3MgbGVhZFwiO1xuICAgICAgICAvL2NvbnNvbGUubG9nKHRoaXMudXBsb2FkTXNnVGV4dCArIFwiIFwiICsgdGhpcy5zZWxlY3RlZEZpbGVzLmxlbmd0aCArIFwiIGZpbGVcIik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHhoci5vbmVycm9yID0gZXZudCA9PiB7XG4gICAgICAvL2NvbnNvbGUubG9nKFwib25lcnJvclwiKTtcbiAgICAgIC8vY29uc29sZS5sb2coZXZudCk7XG4gICAgfTtcblxuICAgIHhoci5vcGVuKFwiUE9TVFwiLCB0aGlzLnVwbG9hZEFQSSwgdHJ1ZSk7XG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXModGhpcy5oZWFkZXJzKSkge1xuICAgICAgLy8gT2JqZWN0LmtleXMgd2lsbCBnaXZlIGFuIEFycmF5IG9mIGtleXNcbiAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdGhpcy5oZWFkZXJzW2tleV0pO1xuICAgIH1cbiAgICAvL2xldCB0b2tlbiA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oXCJ0b2tlblwiKTtcbiAgICAvL3hoci5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsIFwidGV4dC9wbGFpbjtjaGFyc2V0PVVURi04XCIpO1xuICAgIC8veGhyLnNldFJlcXVlc3RIZWFkZXIoJ0F1dGhvcml6YXRpb24nLCBgQmVhcmVyICR7dG9rZW59YCk7XG4gICAgeGhyLnNlbmQoZm9ybURhdGEpO1xuICB9XG5cbiAgcmVtb3ZlRmlsZShpOiBhbnksIHNmX25hOiBhbnkpIHtcbiAgICAvL2NvbnNvbGUubG9nKFwicmVtb3ZlIGZpbGUgY2xpY2tlZCBcIiArIGkpXG4gICAgaWYgKHNmX25hID09IFwic2ZcIikge1xuICAgICAgdGhpcy5zZWxlY3RlZEZpbGVzLnNwbGljZShpLCAxKTtcbiAgICAgIHRoaXMuQ2FwdGlvbi5zcGxpY2UoaSwgMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubm90QWxsb3dlZExpc3Quc3BsaWNlKGksIDEpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnNlbGVjdGVkRmlsZXMubGVuZ3RoID09IDApIHtcbiAgICAgIHRoaXMudXBsb2FkQnRuID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgY29udmVydFNpemUoZmlsZVNpemU6IG51bWJlcikge1xuICAgIC8vY29uc29sZS5sb2coZmlsZVNpemUgKyBcIiAtIFwiKyBzdHIpO1xuICAgIHJldHVybiBmaWxlU2l6ZSA8IDEwMjQwMDBcbiAgICAgID8gKGZpbGVTaXplIC8gMTAyNCkudG9GaXhlZCgyKSArIFwiIEtCXCJcbiAgICAgIDogKGZpbGVTaXplIC8gMTAyNDAwMCkudG9GaXhlZCgyKSArIFwiIE1CXCI7XG4gIH1cblxuICBhdHRhY2hwaW5PbmNsaWNrKCkge1xuICAgIC8vY29uc29sZS5sb2coXCJJRDogXCIsIHRoaXMuaWQpO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2VsXCIgKyB0aGlzLmlkKSEuY2xpY2soKTtcbiAgICAvLyQoXCIjXCIrXCJzZWxcIit0aGlzLmlkKS5jbGljaygpO1xuICB9XG5cbiAgZHJvcChldmVudDogYW55KSB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAvL2NvbnNvbGUubG9nKFwiZHJvcDogXCIsIGV2ZW50KTtcbiAgICAvL2NvbnNvbGUubG9nKFwiZHJvcDogXCIsIGV2ZW50LmRhdGFUcmFuc2Zlci5maWxlcyk7XG4gICAgdGhpcy5vbkNoYW5nZShldmVudCk7XG4gIH1cbiAgYWxsb3dEcm9wKGV2ZW50OiBhbnkpIHtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGV2ZW50LmRhdGFUcmFuc2Zlci5kcm9wRWZmZWN0ID0gXCJjb3B5XCI7XG4gICAgLy9jb25zb2xlLmxvZyhcImFsbG93RHJvcDogXCIsZXZlbnQpXG4gIH1cbn1cblxuLyogaW50ZXJmYWNlIENPTkZJRyB7XG4gIHVwbG9hZEFQSTogc3RyaW5nO1xuICBtdWx0aXBsZT86IGJvb2xlYW47XG4gIGZvcm1hdHNBbGxvd2VkPzogc3RyaW5nO1xuICBtYXhTaXplPzogbnVtYmVyO1xuICBpZD86IG51bWJlcjtcbiAgcmVzZXRVcGxvYWQ/OiBib29sZWFuO1xuICB0aGVtZT86IHN0cmluZztcbiAgaGlkZVByb2dyZXNzQmFyPzogYm9vbGVhbjtcbiB9XG4gKi9cblxuIGludGVyZmFjZSBSZXBsYWNlVGV4dHMge1xuICBzZWxlY3RGaWxlQnRuOiBzdHJpbmcsXG4gIHJlc2V0QnRuOiBzdHJpbmcsXG4gIHVwbG9hZEJ0bjogc3RyaW5nLFxuICBkcmFnTkRyb3BCb3g6IHN0cmluZyxcbiAgYXR0YWNoUGluQnRuOiBzdHJpbmcsXG4gIGFmdGVyVXBsb2FkTXNnX3N1Y2Nlc3M6IHN0cmluZyxcbiAgYWZ0ZXJVcGxvYWRNc2dfZXJyb3I6IHN0cmluZyxcbn07XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEFuZ3VsYXJGaWxlVXBsb2FkZXJDb21wb25lbnQgfSBmcm9tICcuL2FuZ3VsYXItZmlsZS11cGxvYWRlci5jb21wb25lbnQnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbXG4gICAgQ29tbW9uTW9kdWxlXG4gIF0sXG4gIGRlY2xhcmF0aW9uczogW0FuZ3VsYXJGaWxlVXBsb2FkZXJDb21wb25lbnRdLFxuICBleHBvcnRzOiBbQW5ndWxhckZpbGVVcGxvYWRlckNvbXBvbmVudF1cbn0pXG5leHBvcnQgY2xhc3MgQW5ndWxhckZpbGVVcGxvYWRlck1vZHVsZSB7IH1cbiJdLCJuYW1lcyI6W10sIm1hcHBp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","import { Directive, ElementRef, NgModule, ApplicationRef, ComponentFactoryResolver, Injectable, InjectionToken, Inject, Injector, NgZone, SecurityContext, Component, HostBinding, HostListener, Optional, SkipSelf } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass ToastContainerDirective {\n    /**\n     * @param {?} el\n     */\n    constructor(el) {\n        this.el = el;\n    }\n    /**\n     * @return {?}\n     */\n    getContainerElement() {\n        return this.el.nativeElement;\n    }\n}\nToastContainerDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[toastContainer]',\n                exportAs: 'toastContainer',\n            },] }\n];\n/** @nocollapse */\nToastContainerDirective.ctorParameters = () => [\n    { type: ElementRef }\n];\nclass ToastContainerModule {\n}\nToastContainerModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [ToastContainerDirective],\n                exports: [ToastContainerDirective],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Everything a toast needs to launch\n */\nclass ToastPackage {\n    /**\n     * @param {?} toastId\n     * @param {?} config\n     * @param {?} message\n     * @param {?} title\n     * @param {?} toastType\n     * @param {?} toastRef\n     */\n    constructor(toastId, config, message, title, toastType, toastRef) {\n        this.toastId = toastId;\n        this.config = config;\n        this.message = message;\n        this.title = title;\n        this.toastType = toastType;\n        this.toastRef = toastRef;\n        this._onTap = new Subject();\n        this._onAction = new Subject();\n        this.toastRef.afterClosed().subscribe(() => {\n            this._onAction.complete();\n            this._onTap.complete();\n        });\n    }\n    /**\n     * Fired on click\n     * @return {?}\n     */\n    triggerTap() {\n        this._onTap.next();\n        if (this.config.tapToDismiss) {\n            this._onTap.complete();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    onTap() {\n        return this._onTap.asObservable();\n    }\n    /**\n     * available for use in custom toast\n     * @param {?=} action\n     * @return {?}\n     */\n    triggerAction(action) {\n        this._onAction.next(action);\n    }\n    /**\n     * @return {?}\n     */\n    onAction() {\n        return this._onAction.asObservable();\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n * @template T\n */\nclass ComponentPortal {\n    /**\n     * @param {?} component\n     * @param {?} injector\n     */\n    constructor(component, injector) {\n        this.component = component;\n        this.injector = injector;\n    }\n    /**\n     * Attach this portal to a host.\n     * @param {?} host\n     * @param {?} newestOnTop\n     * @return {?}\n     */\n    attach(host, newestOnTop) {\n        this._attachedHost = host;\n        return host.attach(this, newestOnTop);\n    }\n    /**\n     * Detach this portal from its host\n     * @return {?}\n     */\n    detach() {\n        /** @type {?} */\n        const host = this._attachedHost;\n        if (host) {\n            this._attachedHost = undefined;\n            return host.detach();\n        }\n    }\n    /**\n     * Whether this portal is attached to a host.\n     * @return {?}\n     */\n    get isAttached() {\n        return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalHost reference without performing `attach()`. This is used directly by\n     * the PortalHost when it is performing an `attach()` or `detach()`.\n     * @param {?=} host\n     * @return {?}\n     */\n    setAttachedHost(host) {\n        this._attachedHost = host;\n    }\n}\n/**\n * Partial implementation of PortalHost that only deals with attaching a\n * ComponentPortal\n * @abstract\n */\nclass BasePortalHost {\n    /**\n     * @param {?} portal\n     * @param {?} newestOnTop\n     * @return {?}\n     */\n    attach(portal, newestOnTop) {\n        this._attachedPortal = portal;\n        return this.attachComponentPortal(portal, newestOnTop);\n    }\n    /**\n     * @return {?}\n     */\n    detach() {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost();\n        }\n        this._attachedPortal = undefined;\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = undefined;\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    setDisposeFn(fn) {\n        this._disposeFn = fn;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n *\n * This is the only part of the portal core that directly touches the DOM.\n */\nclass DomPortalHost extends BasePortalHost {\n    /**\n     * @param {?} _hostDomElement\n     * @param {?} _componentFactoryResolver\n     * @param {?} _appRef\n     */\n    constructor(_hostDomElement, _componentFactoryResolver, _appRef) {\n        super();\n        this._hostDomElement = _hostDomElement;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @template T\n     * @param {?} portal Portal to be attached\n     * @param {?} newestOnTop\n     * @return {?}\n     */\n    attachComponentPortal(portal, newestOnTop) {\n        /** @type {?} */\n        const componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n        /** @type {?} */\n        let componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the ChangeDetector for that component to the application (which\n        // happens automatically when using a ViewContainer).\n        componentRef = componentFactory.create(portal.injector);\n        // When creating a component outside of a ViewContainer, we need to manually register\n        // its ChangeDetector with the application. This API is unfortunately not yet published\n        // in Angular core. The change detector must also be deregistered when the component\n        // is destroyed to prevent memory leaks.\n        this._appRef.attachView(componentRef.hostView);\n        this.setDisposeFn(() => {\n            this._appRef.detachView(componentRef.hostView);\n            componentRef.destroy();\n        });\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        if (newestOnTop) {\n            this._hostDomElement.insertBefore(this._getComponentRootNode(componentRef), this._hostDomElement.firstChild);\n        }\n        else {\n            this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));\n        }\n        return componentRef;\n    }\n    /**\n     * Gets the root HTMLElement for an instantiated component.\n     * @param {?} componentRef\n     * @return {?}\n     */\n    _getComponentRootNode(componentRef) {\n        return /** @type {?} */ ((/** @type {?} */ (componentRef.hostView)).rootNodes[0]);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    /**\n     * @param {?} _portalHost\n     */\n    constructor(_portalHost) {\n        this._portalHost = _portalHost;\n    }\n    /**\n     * @param {?} portal\n     * @param {?=} newestOnTop\n     * @return {?}\n     */\n    attach(portal, newestOnTop = true) {\n        return this._portalHost.attach(portal, newestOnTop);\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @return {?} Resolves when the overlay has been detached.\n     */\n    detach() {\n        return this._portalHost.detach();\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * The OverlayContainer is the container in which all overlays will load.\n * It should be provided in the root component to ensure it is properly shared.\n */\nclass OverlayContainer {\n    /**\n     * This method returns the overlay container element.  It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @return {?} the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     * @return {?}\n     */\n    _createContainer() {\n        /** @type {?} */\n        const container = document.createElement('div');\n        container.classList.add('overlay-container');\n        document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    /**\n     * @param {?} _overlayContainer\n     * @param {?} _componentFactoryResolver\n     * @param {?} _appRef\n     */\n    constructor(_overlayContainer, _componentFactoryResolver, _appRef) {\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._paneElements = new Map();\n    }\n    /**\n     * Creates an overlay.\n     * @param {?=} positionClass\n     * @param {?=} overlayContainer\n     * @return {?} A reference to the created overlay.\n     */\n    create(positionClass, overlayContainer) {\n        // get existing pane if possible\n        return this._createOverlayRef(this.getPaneElement(positionClass, overlayContainer));\n    }\n    /**\n     * @param {?=} positionClass\n     * @param {?=} overlayContainer\n     * @return {?}\n     */\n    getPaneElement(positionClass = '', overlayContainer) {\n        if (!this._paneElements.get(overlayContainer)) {\n            this._paneElements.set(overlayContainer, {});\n        }\n        if (!this._paneElements.get(overlayContainer)[positionClass]) {\n            this._paneElements.get(overlayContainer)[positionClass] = this._createPaneElement(positionClass, overlayContainer);\n        }\n        return this._paneElements.get(overlayContainer)[positionClass];\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @param {?} positionClass\n     * @param {?=} overlayContainer\n     * @return {?} Newly-created pane element\n     */\n    _createPaneElement(positionClass, overlayContainer) {\n        /** @type {?} */\n        const pane = document.createElement('div');\n        pane.id = 'toast-container';\n        pane.classList.add(positionClass);\n        pane.classList.add('toast-container');\n        if (!overlayContainer) {\n            this._overlayContainer.getContainerElement().appendChild(pane);\n        }\n        else {\n            overlayContainer.getContainerElement().appendChild(pane);\n        }\n        return pane;\n    }\n    /**\n     * Create a DomPortalHost into which the overlay content can be loaded.\n     * @param {?} pane The DOM element to turn into a portal host.\n     * @return {?} A portal host for the given DOM element.\n     */\n    _createPortalHost(pane) {\n        return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef);\n    }\n    /**\n     * Creates an OverlayRef for an overlay in the given DOM element.\n     * @param {?} pane DOM element for the overlay\n     * @return {?}\n     */\n    _createOverlayRef(pane) {\n        return new OverlayRef(this._createPortalHost(pane));\n    }\n}\nOverlay.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nOverlay.ctorParameters = () => [\n    { type: OverlayContainer },\n    { type: ComponentFactoryResolver },\n    { type: ApplicationRef }\n];\n/** *\n * Providers for Overlay and its related injectables.\n  @type {?} */\nconst OVERLAY_PROVIDERS = [\n    Overlay,\n    OverlayContainer,\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Reference to a toast opened via the Toastr service.\n * @template T\n */\nclass ToastRef {\n    /**\n     * @param {?} _overlayRef\n     */\n    constructor(_overlayRef) {\n        this._overlayRef = _overlayRef;\n        /**\n         * Subject for notifying the user that the toast has finished closing.\n         */\n        this._afterClosed = new Subject();\n        /**\n         * triggered when toast is activated\n         */\n        this._activate = new Subject();\n        /**\n         * notifies the toast that it should close before the timeout\n         */\n        this._manualClose = new Subject();\n        /**\n         * notifies the toast that it should reset the timeouts\n         */\n        this._resetTimeout = new Subject();\n    }\n    /**\n     * @return {?}\n     */\n    manualClose() {\n        this._manualClose.next();\n        this._manualClose.complete();\n    }\n    /**\n     * @return {?}\n     */\n    manualClosed() {\n        return this._manualClose.asObservable();\n    }\n    /**\n     * @return {?}\n     */\n    timeoutReset() {\n        return this._resetTimeout.asObservable();\n    }\n    /**\n     * Close the toast.\n     * @return {?}\n     */\n    close() {\n        this._overlayRef.detach();\n        this._afterClosed.next();\n        this._manualClose.next();\n        this._afterClosed.complete();\n        this._manualClose.complete();\n        this._activate.complete();\n        this._resetTimeout.complete();\n    }\n    /**\n     * Gets an observable that is notified when the toast is finished closing.\n     * @return {?}\n     */\n    afterClosed() {\n        return this._afterClosed.asObservable();\n    }\n    /**\n     * @return {?}\n     */\n    isInactive() {\n        return this._activate.isStopped;\n    }\n    /**\n     * @return {?}\n     */\n    activate() {\n        this._activate.next();\n        this._activate.complete();\n    }\n    /**\n     * Gets an observable that is notified when the toast has started opening.\n     * @return {?}\n     */\n    afterActivate() {\n        return this._activate.asObservable();\n    }\n    /**\n     * Reset the toast timouts\n     * @return {?}\n     */\n    resetTimeout() {\n        this._resetTimeout.next();\n    }\n}\n/**\n * Custom injector type specifically for instantiating components with a toast.\n */\nclass ToastInjector {\n    /**\n     * @param {?} _toastPackage\n     * @param {?} _parentInjector\n     */\n    constructor(_toastPackage, _parentInjector) {\n        this._toastPackage = _toastPackage;\n        this._parentInjector = _parentInjector;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    get(token, notFoundValue) {\n        if (token === ToastPackage && this._toastPackage) {\n            return this._toastPackage;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst TOAST_CONFIG = new InjectionToken('ToastConfig');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass ToastrService {\n    /**\n     * @param {?} token\n     * @param {?} overlay\n     * @param {?} _injector\n     * @param {?} sanitizer\n     * @param {?} ngZone\n     */\n    constructor(token, overlay, _injector, sanitizer, ngZone) {\n        this.overlay = overlay;\n        this._injector = _injector;\n        this.sanitizer = sanitizer;\n        this.ngZone = ngZone;\n        this.currentlyActive = 0;\n        this.toasts = [];\n        this.index = 0;\n        /** @type {?} */\n        const defaultConfig = new token.defaults();\n        this.toastrConfig = Object.assign({}, defaultConfig, token.config);\n        this.toastrConfig.iconClasses = Object.assign({}, defaultConfig.iconClasses, token.config.iconClasses);\n    }\n    /**\n     * show toast\n     * @param {?=} message\n     * @param {?=} title\n     * @param {?=} override\n     * @param {?=} type\n     * @return {?}\n     */\n    show(message, title, override = {}, type = '') {\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /**\n     * show successful toast\n     * @param {?=} message\n     * @param {?=} title\n     * @param {?=} override\n     * @return {?}\n     */\n    success(message, title, override = {}) {\n        /** @type {?} */\n        const type = this.toastrConfig.iconClasses.success || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /**\n     * show error toast\n     * @param {?=} message\n     * @param {?=} title\n     * @param {?=} override\n     * @return {?}\n     */\n    error(message, title, override = {}) {\n        /** @type {?} */\n        const type = this.toastrConfig.iconClasses.error || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /**\n     * show info toast\n     * @param {?=} message\n     * @param {?=} title\n     * @param {?=} override\n     * @return {?}\n     */\n    info(message, title, override = {}) {\n        /** @type {?} */\n        const type = this.toastrConfig.iconClasses.info || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /**\n     * show warning toast\n     * @param {?=} message\n     * @param {?=} title\n     * @param {?=} override\n     * @return {?}\n     */\n    warning(message, title, override = {}) {\n        /** @type {?} */\n        const type = this.toastrConfig.iconClasses.warning || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /**\n     * Remove all or a single toast by id\n     * @param {?=} toastId\n     * @return {?}\n     */\n    clear(toastId) {\n        // Call every toastRef manualClose function\n        for (const toast of this.toasts) {\n            if (toastId !== undefined) {\n                if (toast.toastId === toastId) {\n                    toast.toastRef.manualClose();\n                    return;\n                }\n            }\n            else {\n                toast.toastRef.manualClose();\n            }\n        }\n    }\n    /**\n     * Remove and destroy a single toast by id\n     * @param {?} toastId\n     * @return {?}\n     */\n    remove(toastId) {\n        /** @type {?} */\n        const found = this._findToast(toastId);\n        if (!found) {\n            return false;\n        }\n        found.activeToast.toastRef.close();\n        this.toasts.splice(found.index, 1);\n        this.currentlyActive = this.currentlyActive - 1;\n        if (!this.toastrConfig.maxOpened || !this.toasts.length) {\n            return false;\n        }\n        if (this.currentlyActive < this.toastrConfig.maxOpened &&\n            this.toasts[this.currentlyActive]) {\n            /** @type {?} */\n            const p = this.toasts[this.currentlyActive].toastRef;\n            if (!p.isInactive()) {\n                this.currentlyActive = this.currentlyActive + 1;\n                p.activate();\n            }\n        }\n        return true;\n    }\n    /**\n     * Determines if toast message is already shown\n     * @param {?} message\n     * @param {?} resetOnDuplicate\n     * @return {?}\n     */\n    isDuplicate(message, resetOnDuplicate) {\n        for (let i = 0; i < this.toasts.length; i++) {\n            if (this.toasts[i].message === message) {\n                if (resetOnDuplicate &&\n                    this.toasts[i].toastRef.componentInstance.resetTimeout) {\n                    this.toasts[i].toastRef.resetTimeout();\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * create a clone of global config and apply individual settings\n     * @param {?=} override\n     * @return {?}\n     */\n    applyConfig(override = {}) {\n        return Object.assign({}, this.toastrConfig, override);\n    }\n    /**\n     * Find toast object by id\n     * @param {?} toastId\n     * @return {?}\n     */\n    _findToast(toastId) {\n        for (let i = 0; i < this.toasts.length; i++) {\n            if (this.toasts[i].toastId === toastId) {\n                return { index: i, activeToast: this.toasts[i] };\n            }\n        }\n        return null;\n    }\n    /**\n     * Determines the need to run inside angular's zone then builds the toast\n     * @param {?} toastType\n     * @param {?} message\n     * @param {?} title\n     * @param {?} config\n     * @return {?}\n     */\n    _preBuildNotification(toastType, message, title, config) {\n        if (config.onActivateTick) {\n            return this.ngZone.run(() => this._buildNotification(toastType, message, title, config));\n        }\n        return this._buildNotification(toastType, message, title, config);\n    }\n    /**\n     * Creates and attaches toast data to component\n     * returns null if toast is duplicate and preventDuplicates == True\n     * @param {?} toastType\n     * @param {?} message\n     * @param {?} title\n     * @param {?} config\n     * @return {?}\n     */\n    _buildNotification(toastType, message, title, config) {\n        if (!config.toastComponent) {\n            throw new Error('toastComponent required');\n        }\n        // max opened and auto dismiss = true\n        if (message &&\n            this.toastrConfig.preventDuplicates &&\n            this.isDuplicate(message, this.toastrConfig.resetTimeoutOnDuplicate)) {\n            return null;\n        }\n        this.previousToastMessage = message;\n        /** @type {?} */\n        let keepInactive = false;\n        if (this.toastrConfig.maxOpened &&\n            this.currentlyActive >= this.toastrConfig.maxOpened) {\n            keepInactive = true;\n            if (this.toastrConfig.autoDismiss) {\n                this.clear(this.toasts[0].toastId);\n            }\n        }\n        /** @type {?} */\n        const overlayRef = this.overlay.create(config.positionClass, this.overlayContainer);\n        this.index = this.index + 1;\n        /** @type {?} */\n        let sanitizedMessage = message;\n        if (message && config.enableHtml) {\n            sanitizedMessage = this.sanitizer.sanitize(SecurityContext.HTML, message);\n        }\n        /** @type {?} */\n        const toastRef = new ToastRef(overlayRef);\n        /** @type {?} */\n        const toastPackage = new ToastPackage(this.index, config, sanitizedMessage, title, toastType, toastRef);\n        /** @type {?} */\n        const toastInjector = new ToastInjector(toastPackage, this._injector);\n        /** @type {?} */\n        const component = new ComponentPortal(config.toastComponent, toastInjector);\n        /** @type {?} */\n        const portal = overlayRef.attach(component, this.toastrConfig.newestOnTop);\n        toastRef.componentInstance = (/** @type {?} */ (portal))._component;\n        /** @type {?} */\n        const ins = {\n            toastId: this.index,\n            message: message || '',\n            toastRef,\n            onShown: toastRef.afterActivate(),\n            onHidden: toastRef.afterClosed(),\n            onTap: toastPackage.onTap(),\n            onAction: toastPackage.onAction(),\n            portal\n        };\n        if (!keepInactive) {\n            setTimeout(() => {\n                ins.toastRef.activate();\n                this.currentlyActive = this.currentlyActive + 1;\n            });\n        }\n        this.toasts.push(ins);\n        return ins;\n    }\n}\nToastrService.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nToastrService.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [TOAST_CONFIG,] }] },\n    { type: Overlay },\n    { type: Injector },\n    { type: DomSanitizer },\n    { type: NgZone }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass Toast {\n    /**\n     * @param {?} toastrService\n     * @param {?} toastPackage\n     * @param {?=} ngZone\n     */\n    constructor(toastrService, toastPackage, ngZone) {\n        this.toastrService = toastrService;\n        this.toastPackage = toastPackage;\n        this.ngZone = ngZone;\n        /**\n         * width of progress bar\n         */\n        this.width = -1;\n        /**\n         * a combination of toast type and options.toastClass\n         */\n        this.toastClasses = '';\n        /**\n         * controls animation\n         */\n        this.state = {\n            value: 'inactive',\n            params: {\n                easeTime: this.toastPackage.config.easeTime,\n                easing: 'ease-in'\n            }\n        };\n        this.message = toastPackage.message;\n        this.title = toastPackage.title;\n        this.options = toastPackage.config;\n        this.originalTimeout = toastPackage.config.timeOut;\n        this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n        this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n            this.activateToast();\n        });\n        this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n            this.remove();\n        });\n        this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n            this.resetTimeout();\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.sub.unsubscribe();\n        this.sub1.unsubscribe();\n        this.sub2.unsubscribe();\n        clearInterval(this.intervalId);\n        clearTimeout(this.timeout);\n    }\n    /**\n     * activates toast and sets timeout\n     * @return {?}\n     */\n    activateToast() {\n        this.state = Object.assign({}, this.state, { value: 'active' });\n        if (!this.options.disableTimeOut && this.options.timeOut) {\n            this.outsideTimeout(() => this.remove(), this.options.timeOut);\n            this.hideTime = new Date().getTime() + this.options.timeOut;\n            if (this.options.progressBar) {\n                this.outsideInterval(() => this.updateProgress(), 10);\n            }\n        }\n    }\n    /**\n     * updates progress bar width\n     * @return {?}\n     */\n    updateProgress() {\n        if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n            return;\n        }\n        /** @type {?} */\n        const now = new Date().getTime();\n        /** @type {?} */\n        const remaining = this.hideTime - now;\n        this.width = (remaining / this.options.timeOut) * 100;\n        if (this.options.progressAnimation === 'increasing') {\n            this.width = 100 - this.width;\n        }\n        if (this.width <= 0) {\n            this.width = 0;\n        }\n        if (this.width >= 100) {\n            this.width = 100;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    resetTimeout() {\n        clearTimeout(this.timeout);\n        clearInterval(this.intervalId);\n        this.state = Object.assign({}, this.state, { value: 'active' });\n        this.outsideTimeout(() => this.remove(), this.originalTimeout);\n        this.options.timeOut = this.originalTimeout;\n        this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n        this.width = -1;\n        if (this.options.progressBar) {\n            this.outsideInterval(() => this.updateProgress(), 10);\n        }\n    }\n    /**\n     * tells toastrService to remove this toast after animation time\n     * @return {?}\n     */\n    remove() {\n        if (this.state.value === 'removed') {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.state = Object.assign({}, this.state, { value: 'removed' });\n        this.outsideTimeout(() => this.toastrService.remove(this.toastPackage.toastId), +this.toastPackage.config.easeTime);\n    }\n    /**\n     * @return {?}\n     */\n    tapToast() {\n        if (this.state.value === 'removed') {\n            return;\n        }\n        this.toastPackage.triggerTap();\n        if (this.options.tapToDismiss) {\n            this.remove();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    stickAround() {\n        if (this.state.value === 'removed') {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.options.timeOut = 0;\n        this.hideTime = 0;\n        // disable progressBar\n        clearInterval(this.intervalId);\n        this.width = 0;\n    }\n    /**\n     * @return {?}\n     */\n    delayedHideToast() {\n        if (this.options.disableTimeOut ||\n            this.options.extendedTimeOut === 0 ||\n            this.state.value === 'removed') {\n            return;\n        }\n        this.outsideTimeout(() => this.remove(), this.options.extendedTimeOut);\n        this.options.timeOut = this.options.extendedTimeOut;\n        this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n        this.width = -1;\n        if (this.options.progressBar) {\n            this.outsideInterval(() => this.updateProgress(), 10);\n        }\n    }\n    /**\n     * @param {?} func\n     * @param {?} timeout\n     * @return {?}\n     */\n    outsideTimeout(func, timeout) {\n        if (this.ngZone) {\n            this.ngZone.runOutsideAngular(() => (this.timeout = setTimeout(() => this.runInsideAngular(func), timeout)));\n        }\n        else {\n            this.timeout = setTimeout(() => func(), timeout);\n        }\n    }\n    /**\n     * @param {?} func\n     * @param {?} timeout\n     * @return {?}\n     */\n    outsideInterval(func, timeout) {\n        if (this.ngZone) {\n            this.ngZone.runOutsideAngular(() => (this.intervalId = setInterval(() => this.runInsideAngular(func), timeout)));\n        }\n        else {\n            this.intervalId = setInterval(() => func(), timeout);\n        }\n    }\n    /**\n     * @param {?} func\n     * @return {?}\n     */\n    runInsideAngular(func) {\n        if (this.ngZone) {\n            this.ngZone.run(() => func());\n        }\n        else {\n            func();\n        }\n    }\n}\nToast.decorators = [\n    { type: Component, args: [{\n                selector: '[toast-component]',\n                template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }}\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alertdialog\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alertdialog\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\n  </div>\n  `,\n                animations: [\n                    trigger('flyInOut', [\n                        state('inactive', style({\n                            display: 'none',\n                            opacity: 0\n                        })),\n                        state('active', style({})),\n                        state('removed', style({ opacity: 0 })),\n                        transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')),\n                        transition('active => removed', animate('{{ easeTime }}ms {{ easing }}'))\n                    ])\n                ],\n                preserveWhitespaces: false\n            }] }\n];\n/** @nocollapse */\nToast.ctorParameters = () => [\n    { type: ToastrService },\n    { type: ToastPackage },\n    { type: NgZone }\n];\nToast.propDecorators = {\n    toastClasses: [{ type: HostBinding, args: ['class',] }],\n    state: [{ type: HostBinding, args: ['@flyInOut',] }],\n    tapToast: [{ type: HostListener, args: ['click',] }],\n    stickAround: [{ type: HostListener, args: ['mouseenter',] }],\n    delayedHideToast: [{ type: HostListener, args: ['mouseleave',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass DefaultGlobalConfig {\n    constructor() {\n        // Global\n        this.maxOpened = 0;\n        this.autoDismiss = false;\n        this.newestOnTop = true;\n        this.preventDuplicates = false;\n        this.resetTimeoutOnDuplicate = false;\n        this.iconClasses = {\n            error: 'toast-error',\n            info: 'toast-info',\n            success: 'toast-success',\n            warning: 'toast-warning'\n        };\n        // Individual\n        this.toastComponent = Toast;\n        this.closeButton = false;\n        this.timeOut = 5000;\n        this.extendedTimeOut = 1000;\n        this.enableHtml = false;\n        this.progressBar = false;\n        this.toastClass = 'toast';\n        this.positionClass = 'toast-top-right';\n        this.titleClass = 'toast-title';\n        this.messageClass = 'toast-message';\n        this.easing = 'ease-in';\n        this.easeTime = 300;\n        this.tapToDismiss = true;\n        this.onActivateTick = false;\n        this.progressAnimation = 'decreasing';\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass ToastrModule {\n    /**\n     * @param {?} parentModule\n     */\n    constructor(parentModule) {\n        if (parentModule) {\n            throw new Error('ToastrModule is already loaded. It should only be imported in your application\\'s main module.');\n        }\n    }\n    /**\n     * @param {?=} config\n     * @return {?}\n     */\n    static forRoot(config = {}) {\n        return {\n            ngModule: ToastrModule,\n            providers: [\n                { provide: TOAST_CONFIG, useValue: { config, defaults: DefaultGlobalConfig } },\n                OverlayContainer,\n                Overlay,\n                ToastrService,\n            ],\n        };\n    }\n}\nToastrModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule],\n                exports: [Toast],\n                declarations: [Toast],\n                entryComponents: [Toast],\n            },] }\n];\n/** @nocollapse */\nToastrModule.ctorParameters = () => [\n    { type: ToastrModule, decorators: [{ type: Optional }, { type: SkipSelf }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass ToastNoAnimation {\n    /**\n     * @param {?} toastrService\n     * @param {?} toastPackage\n     * @param {?} appRef\n     */\n    constructor(toastrService, toastPackage, appRef) {\n        this.toastrService = toastrService;\n        this.toastPackage = toastPackage;\n        this.appRef = appRef;\n        /**\n         * width of progress bar\n         */\n        this.width = -1;\n        /**\n         * a combination of toast type and options.toastClass\n         */\n        this.toastClasses = '';\n        /**\n         * controls animation\n         */\n        this.state = 'inactive';\n        this.message = toastPackage.message;\n        this.title = toastPackage.title;\n        this.options = toastPackage.config;\n        this.originalTimeout = toastPackage.config.timeOut;\n        this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n        this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n            this.activateToast();\n        });\n        this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n            this.remove();\n        });\n        this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n            this.resetTimeout();\n        });\n    }\n    /**\n     * @return {?}\n     */\n    get displayStyle() {\n        if (this.state === 'inactive') {\n            return 'none';\n        }\n        return 'inherit';\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.sub.unsubscribe();\n        this.sub1.unsubscribe();\n        this.sub2.unsubscribe();\n        clearInterval(this.intervalId);\n        clearTimeout(this.timeout);\n    }\n    /**\n     * activates toast and sets timeout\n     * @return {?}\n     */\n    activateToast() {\n        this.state = 'active';\n        if (!this.options.disableTimeOut && this.options.timeOut) {\n            this.timeout = setTimeout(() => {\n                this.remove();\n            }, this.options.timeOut);\n            this.hideTime = new Date().getTime() + this.options.timeOut;\n            if (this.options.progressBar) {\n                this.intervalId = setInterval(() => this.updateProgress(), 10);\n            }\n        }\n        if (this.options.onActivateTick) {\n            this.appRef.tick();\n        }\n    }\n    /**\n     * updates progress bar width\n     * @return {?}\n     */\n    updateProgress() {\n        if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n            return;\n        }\n        /** @type {?} */\n        const now = new Date().getTime();\n        /** @type {?} */\n        const remaining = this.hideTime - now;\n        this.width = (remaining / this.options.timeOut) * 100;\n        if (this.options.progressAnimation === 'increasing') {\n            this.width = 100 - this.width;\n        }\n        if (this.width <= 0) {\n            this.width = 0;\n        }\n        if (this.width >= 100) {\n            this.width = 100;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    resetTimeout() {\n        clearTimeout(this.timeout);\n        clearInterval(this.intervalId);\n        this.state = 'active';\n        this.options.timeOut = this.originalTimeout;\n        this.timeout = setTimeout(() => this.remove(), this.originalTimeout);\n        this.hideTime = new Date().getTime() + (this.originalTimeout || 0);\n        this.width = -1;\n        if (this.options.progressBar) {\n            this.intervalId = setInterval(() => this.updateProgress(), 10);\n        }\n    }\n    /**\n     * tells toastrService to remove this toast after animation time\n     * @return {?}\n     */\n    remove() {\n        if (this.state === 'removed') {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.state = 'removed';\n        this.timeout = setTimeout(() => this.toastrService.remove(this.toastPackage.toastId));\n    }\n    /**\n     * @return {?}\n     */\n    tapToast() {\n        if (this.state === 'removed') {\n            return;\n        }\n        this.toastPackage.triggerTap();\n        if (this.options.tapToDismiss) {\n            this.remove();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    stickAround() {\n        if (this.state === 'removed') {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.options.timeOut = 0;\n        this.hideTime = 0;\n        // disable progressBar\n        clearInterval(this.intervalId);\n        this.width = 0;\n    }\n    /**\n     * @return {?}\n     */\n    delayedHideToast() {\n        if (this.options.disableTimeOut ||\n            this.options.extendedTimeOut === 0 ||\n            this.state === 'removed') {\n            return;\n        }\n        this.timeout = setTimeout(() => this.remove(), this.options.extendedTimeOut);\n        this.options.timeOut = this.options.extendedTimeOut;\n        this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n        this.width = -1;\n        if (this.options.progressBar) {\n            this.intervalId = setInterval(() => this.updateProgress(), 10);\n        }\n    }\n}\nToastNoAnimation.decorators = [\n    { type: Component, args: [{\n                selector: '[toast-component]',\n                template: `\r\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" class=\"toast-close-button\" aria-label=\"Close\">\r\n    <span aria-hidden=\"true\">&times;</span>\r\n  </button>\r\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\r\n    {{ title }}\r\n  </div>\r\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\" aria-live=\"polite\"\r\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\r\n  </div>\r\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\" aria-live=\"polite\"\r\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\r\n    {{ message }}\r\n  </div>\r\n  <div *ngIf=\"options.progressBar\">\r\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\r\n  </div>\r\n  `\n            }] }\n];\n/** @nocollapse */\nToastNoAnimation.ctorParameters = () => [\n    { type: ToastrService },\n    { type: ToastPackage },\n    { type: ApplicationRef }\n];\nToastNoAnimation.propDecorators = {\n    toastClasses: [{ type: HostBinding, args: ['class',] }],\n    displayStyle: [{ type: HostBinding, args: ['style.display',] }],\n    tapToast: [{ type: HostListener, args: ['click',] }],\n    stickAround: [{ type: HostListener, args: ['mouseenter',] }],\n    delayedHideToast: [{ type: HostListener, args: ['mouseleave',] }]\n};\nclass ToastNoAnimationModule {\n}\nToastNoAnimationModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule],\n                declarations: [ToastNoAnimation],\n                exports: [ToastNoAnimation],\n                entryComponents: [ToastNoAnimation]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { ToastContainerDirective, ToastContainerModule, Toast, ToastrService, ToastPackage, DefaultGlobalConfig, ToastrModule, ToastRef, ToastInjector, TOAST_CONFIG, ToastNoAnimation, ToastNoAnimationModule, ComponentPortal, BasePortalHost, Overlay, OVERLAY_PROVIDERS, OverlayContainer, OverlayRef };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-12\\\">\\r\\n        <div class=\\\"card\\\">\\r\\n            <div class=\\\"card-body\\\">\\r\\n                <h4 class=\\\"card-title\\\">Basic Drag and Drop</h4>\\r\\n                <h6 class=\\\"card-subtitle\\\">Move stuff between these two containers. Note how the stuff gets inserted near the mouse pointer? Great stuff.</h6>\\r\\n                <div class=\\\"d-flex\\\">\\r\\n                    <div class='dragndrop' [dragula]='\\\"first-bag\\\"'>\\r\\n                        <div>You can move these elements between these two containers</div>\\r\\n                        <div>Moving them anywhere else isn't quite possible</div>\\r\\n                        <div>There's also the possibility of moving elements around in the same container, changing their position</div>\\r\\n                    </div>\\r\\n                    <div class='dragndrop' [dragula]='\\\"first-bag\\\"'>\\r\\n                        <div>This is the default use case. You only need to specify the containers you want to use</div>\\r\\n                        <div>More interactive use cases lie ahead</div>\\r\\n                        <div>Make sure to check out the\\r\\n                            <a href='https://github.com/bevacqua/dragula#readme'>documentation on GitHub!</a>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"card\\\">\\r\\n            <div class=\\\"card-body\\\">\\r\\n                <h4 class=\\\"card-title\\\">Sortable Example</h4>\\r\\n                <h6 class=\\\"card-subtitle\\\">Move stuff between these two containers. Note how the stuff gets inserted near the mouse pointer? Great stuff.</h6>\\r\\n                <div class='dragndrop' [dragula]='\\\"third-bag\\\"'>\\r\\n                    <div>Banana Boat</div>\\r\\n                    <div>Orange Juice</div>\\r\\n                    <div>Cuban Cigar</div>\\r\\n                    <div>Terrible Comedian</div>\\r\\n                    <div>Anxious Cab Driver</div>\\r\\n                    <div>Thriving Venture</div>\\r\\n                    <div>Calm Clam</div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"card\\\">\\r\\n            <div class=\\\"card-body\\\">\\r\\n                <h4 class=\\\"card-title\\\">With output Example</h4>\\r\\n                <h6 class=\\\"card-subtitle\\\">Move stuff between these two containers. Note how the stuff gets inserted near the mouse pointer? Great stuff.</h6>\\r\\n                <div class=\\\"d-flex\\\">\\r\\n                    <div class='dragndrop' [dragula]='\\\"another-bag\\\"' [dragulaModel]='many'>\\r\\n                        <div *ngFor='let text of many' [innerHtml]='text'></div>\\r\\n                    </div>\\r\\n                    <div class='dragndrop' [dragula]='\\\"another-bag\\\"' [dragulaModel]='many2'>\\r\\n                        <div *ngFor='let text of many2' [innerHtml]='text'></div>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div class=\\\"d-flex m-t-30\\\">\\r\\n                    <div class='dragndrop'>\\r\\n                        <pre>{{many | json}}</pre>\\r\\n                    </div>\\r\\n                    <div class='dragndrop'>\\r\\n                        <pre>{{many2 | json}}</pre>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-12\\\">\\r\\n        <div class=\\\"card\\\">\\r\\n            <div class=\\\"card-body\\\">\\r\\n                <h4 class=\\\"card-title\\\">Basic Editor</h4>\\r\\n                <h6 class=\\\"card-subtitle\\\">quill editor with angular and TypeScript. ngx-quill is the new angular 2 and beyond implementation of ngQuill.\\r\\n                    <a href=\\\"https://github.com/KillerCodeMonkey/ngx-quill\\\" target=\\\"_blank\\\">Official website</a>\\r\\n                </h6>\\r\\n                <quill-editor [style]=\\\"{height: '200px'}\\\"></quill-editor>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n    </div>\\r\\n</div>\"","module.exports = \"<div class=\\\"card\\\">\\r\\n    <div class=\\\"card-body\\\">\\r\\n        <h4 class=\\\"card-title mb-3\\\">With minimal configuration</h4>\\r\\n        <angular-file-uploader #afu1 [resetUpload]=resetUpload1 [config]=\\\"afuConfig1\\\" class=\\\"afuc\\\">\\r\\n        </angular-file-uploader>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"card\\\">\\r\\n    <div class=\\\"card-body\\\">\\r\\n        <h4 class=\\\"card-title mb-3\\\">With all available configuration</h4>\\r\\n        <angular-file-uploader #afu3 [config]=\\\"afuConfig3\\\" [resetUpload]=resetUpload3 (ApiResponse)=\\\"DocUpload($event)\\\">\\r\\n        </angular-file-uploader>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"card\\\">\\r\\n    <div class=\\\"card-body\\\">\\r\\n        <h4 class=\\\"card-title mb-3\\\">With all available configuration</h4>\\r\\n        <angular-file-uploader #afu2 [config]=\\\"afuConfig2\\\" [resetUpload]=resetUpload2 (ApiResponse)=\\\"DocUpload($event)\\\">\\r\\n        </angular-file-uploader>\\r\\n    </div>\\r\\n</div>\"","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-4\\\">\\r\\n        <div class=\\\"card\\\">\\r\\n            <div class=\\\"card-body\\\">\\r\\n                <h4 class=\\\"card-title\\\">Toastr Success</h4>\\r\\n                <h6 class=\\\"card-subtitle\\\">This is the simpel toastr with success message</h6>\\r\\n                <button class=\\\"btn btn-success\\\" (click)=\\\"showSuccess()\\\">Toastr Success</button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"col-md-4\\\">\\r\\n        <div class=\\\"card\\\">\\r\\n            <div class=\\\"card-body\\\">\\r\\n                <h4 class=\\\"card-title\\\">Toastr Danger</h4>\\r\\n                <h6 class=\\\"card-subtitle\\\">This is the simpel toastr with Danger message</h6>\\r\\n                <button class=\\\"btn btn-danger\\\" (click)=\\\"showError()\\\">Toastr Danger Error</button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"col-md-4\\\">\\r\\n        <div class=\\\"card\\\">\\r\\n            <div class=\\\"card-body\\\">\\r\\n                <h4 class=\\\"card-title\\\">Toastr Warning</h4>\\r\\n                <h6 class=\\\"card-subtitle\\\">This is the simpel toastr with Warning message</h6>\\r\\n                <button class=\\\"btn btn-warning\\\" (click)=\\\"showWarning()\\\">Toastr Warning</button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"col-md-4\\\">\\r\\n        <div class=\\\"card\\\">\\r\\n            <div class=\\\"card-body\\\">\\r\\n                <h4 class=\\\"card-title\\\">Toastr Info</h4>\\r\\n                <h6 class=\\\"card-subtitle\\\">This is the simpel toastr with Info message</h6>\\r\\n                <button class=\\\"btn btn-info\\\" (click)=\\\"showInfo()\\\">Toastr Info</button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n</div>\"","import { Component, ViewEncapsulation } from '@angular/core';\r\nimport { DragulaService } from 'ng2-dragula';\r\n@Component({\r\n  templateUrl: './drag.component.html',\r\n  styleUrls: ['./drag.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class DragComponent {\r\n\r\n  \r\n\r\n  // This is with the output example\r\n  public many: Array<string> = ['The', 'possibilities', 'are', 'endless!'];\r\n  public many2: Array<string> = ['Explore', 'them'];\r\n\r\n  private hasClass(el: any, name: string): any {\r\n    return new RegExp('(?:^|\\\\s+)' + name + '(?:\\\\s+|$)').test(el.className);\r\n  }\r\n\r\n  private addClass(el: any, name: string): void {\r\n    if (!this.hasClass(el, name)) {\r\n      el.className = el.className ? [el.className, name].join(' ') : name;\r\n    }\r\n  }\r\n\r\n  private removeClass(el: any, name: string): void {\r\n    if (this.hasClass(el, name)) {\r\n      el.className = el.className.replace(\r\n        new RegExp('(?:^|\\\\s+)' + name + '(?:\\\\s+|$)', 'g'),\r\n        ''\r\n      );\r\n    }\r\n  }\r\n\r\n  private onDrag(args: any): void {\r\n    const [e] = args;\r\n    this.removeClass(e, 'ex-moved');\r\n  }\r\n\r\n  private onDrop(args: any): void {\r\n    const [e] = args;\r\n    this.addClass(e, 'ex-moved');\r\n  }\r\n\r\n  private onOver(args: any): void {\r\n    const [el] = args;\r\n    this.addClass(el, 'ex-over');\r\n  }\r\n\r\n  private onOut(args: any): void {\r\n    const [el] = args;\r\n    this.removeClass(el, 'ex-over');\r\n  }\r\n\r\n  private onDropModel(args: any): void {\r\n    const [el, target, source] = args;\r\n    console.log('onDropModel:');\r\n    console.log(el);\r\n    console.log(target);\r\n    console.log(source);\r\n  }\r\n\r\n  private onRemoveModel(args: any): void {\r\n    const [el, source] = args;\r\n    console.log('onRemoveModel:');\r\n    console.log(el);\r\n    console.log(source);\r\n  }\r\n}\r\n","module.exports = \".dragndrop {\\n  border: 1px solid rgba(0, 0, 0, 0.1);\\n  padding: 10px 15px; }\\n  .dragndrop > div {\\n    border: 1px dashed rgba(0, 0, 0, 0.1);\\n    padding: 10px;\\n    cursor: move;\\n    margin: 5px 0; }\\n  .dragndrop > div.ex-moved {\\n      background: red;\\n      color: white; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZXh0cmEtY29tcG9uZW50L2RyYWctbi1kcm9wL0M6XFx4YW1wcFxcaHRkb2NzXFxubHItbmV3XFxtYWluL3NyY1xcYXBwXFxleHRyYS1jb21wb25lbnRcXGRyYWctbi1kcm9wXFxkcmFnLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxvQ0FBb0M7RUFDcEMsa0JBQWtCLEVBQUE7RUFGcEI7SUFJSSxxQ0FBcUM7SUFDckMsYUFBYTtJQUNiLFlBQVk7SUFDWixhQUFhLEVBQUE7RUFQakI7TUFTTSxlQUFlO01BQ2YsWUFBWSxFQUFBIiwiZmlsZSI6InNyYy9hcHAvZXh0cmEtY29tcG9uZW50L2RyYWctbi1kcm9wL2RyYWcuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5kcmFnbmRyb3Age1xyXG4gIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xKTtcclxuICBwYWRkaW5nOiAxMHB4IDE1cHg7XHJcbiAgPiBkaXYge1xyXG4gICAgYm9yZGVyOiAxcHggZGFzaGVkIHJnYmEoMCwgMCwgMCwgMC4xKTtcclxuICAgIHBhZGRpbmc6IDEwcHg7XHJcbiAgICBjdXJzb3I6IG1vdmU7XHJcbiAgICBtYXJnaW46IDVweCAwO1xyXG4gICAgJi5leC1tb3ZlZCB7XHJcbiAgICAgIGJhY2tncm91bmQ6IHJlZDtcclxuICAgICAgY29sb3I6IHdoaXRlO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0= */\"","import { Component, AfterViewInit } from '@angular/core';\r\n@Component({\r\n  templateUrl: './editor.component.html'\r\n})\r\nexport class EditorComponent implements AfterViewInit {\r\n  subtitle: string;\r\n  constructor() {\r\n    this.subtitle = 'This is some text within a card block.';\r\n  }\r\n\r\n  ngAfterViewInit() {}\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { QuillModule } from 'ngx-quill';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { AngularFileUploaderModule } from 'angular-file-uploader';\r\nimport { ToastrModule } from 'ngx-toastr';\r\nimport { DragulaModule } from 'ng2-dragula';\r\n\r\nimport { ExtraComponentsRoutes } from './extra-component.routing';\r\nimport { ToastrComponent } from './toastr/toastr.component';\r\nimport { UploadComponent } from './file-upload/upload.component';\r\nimport { EditorComponent } from './editor/editor.component';\r\nimport { DragComponent } from './drag-n-drop/drag.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(ExtraComponentsRoutes),\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    ToastrModule.forRoot(),\r\n    QuillModule.forRoot(),\r\n    NgbModule,\r\n    DragulaModule.forRoot(),\r\n    AngularFileUploaderModule\r\n  ],\r\n\r\n  declarations: [\r\n    ToastrComponent,\r\n    UploadComponent,\r\n    EditorComponent,\r\n    DragComponent\r\n  ]\r\n})\r\nexport class ExtraComponentModule { }\r\n","import { Routes } from '@angular/router';\r\n\r\nimport { ToastrComponent } from './toastr/toastr.component';\r\nimport { UploadComponent } from './file-upload/upload.component';\r\nimport { EditorComponent } from './editor/editor.component';\r\nimport { DragComponent } from './drag-n-drop/drag.component';\r\n\r\nexport const ExtraComponentsRoutes: Routes = [\r\n  {\r\n    path: '',\r\n    children: [\r\n      {\r\n        path: 'toastr',\r\n        component: ToastrComponent,\r\n        data: {\r\n          title: 'Toastr Notification',\r\n          urls: [\r\n            { title: 'Dashboard', url: '/dashboard' },\r\n            { title: 'Toastr Page' }\r\n          ]\r\n        }\r\n      },\r\n      {\r\n        path: 'upload',\r\n        component: UploadComponent,\r\n        data: {\r\n          title: 'Upload Page',\r\n          urls: [\r\n            { title: 'Dashboard', url: '/dashboard' },\r\n            { title: 'Upload Page' }\r\n          ]\r\n        }\r\n      },\r\n      {\r\n        path: 'editor',\r\n        component: EditorComponent,\r\n        data: {\r\n          title: 'Editor Page',\r\n          urls: [\r\n            { title: 'Dashboard', url: '/dashboard' },\r\n            { title: 'Editor Page' }\r\n          ]\r\n        }\r\n      },\r\n      {\r\n        path: 'dragndrop',\r\n        component: DragComponent,\r\n        data: {\r\n          title: 'DragComponent Page',\r\n          urls: [\r\n            { title: 'Dashboard', url: '/dashboard' },\r\n            { title: 'DragComponent Page' }\r\n          ]\r\n        }\r\n      }\r\n    ]\r\n  }\r\n];\r\n","import { Component, ViewChild } from '@angular/core';\r\nimport { AngularFileUploaderModule, AngularFileUploaderComponent } from 'angular-file-uploader';\r\n\r\n@ViewChild('fileUpload1', {static: true})\r\n\r\n\r\n@Component({\r\n  templateUrl: './upload.component.html',\r\n  styleUrls: ['./upload.scss']\r\n})\r\nexport class UploadComponent {\r\n\r\n  private fileUpload1: AngularFileUploaderComponent;\r\n\r\n  resetUpload1: boolean;\r\n  resetUpload2: boolean;\r\n  resetUpload3: boolean;\r\n  token = 'lkdjlfjld';\r\n  afuConfig1 = {\r\n    multiple: true,\r\n    uploadAPI: {\r\n      url: 'https://slack.com/api/files.upload'\r\n    }\r\n  };\r\n\r\n  afuConfig2 = {\r\n    theme: 'attachPin',\r\n    hideProgressBar: 'true',\r\n    hideResetBtn: 'true',\r\n    maxSize: '1',\r\n    uploadAPI: {\r\n      url: 'https://slack.com/api/files.upload',\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data'\r\n      }\r\n    },\r\n    formatsAllowed: '.jpg,.png',\r\n    multiple: 'true'\r\n  };\r\n  afuConfig3 = {\r\n    theme: 'dragNDrop',\r\n    hideProgressBar: true,\r\n    hideResetBtn: true,\r\n    hideSelectBtn: true,\r\n    maxSize: '1',\r\n    uploadAPI: {\r\n      url: 'https://slack.com/api/files.upload'\r\n    },\r\n    formatsAllowed: '.jpg,.png',\r\n    multiple: true\r\n  };\r\n\r\n  DocUpload(env) {\r\n    console.log(env);\r\n  }\r\n\r\n  resetfu(id) {\r\n    // this.rfu.resetFileUpload(id);\r\n    // id == 1 ? this.afuref1.resetFileUpload() : this.afuref2.resetFileUpload();\r\n    this[`afuref${id}`].resetFileUpload();\r\n    // this.resetUpload1 = true;\r\n  }\r\n\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2V4dHJhLWNvbXBvbmVudC9maWxlLXVwbG9hZC91cGxvYWQuc2NzcyJ9 */\"","import { Component } from '@angular/core';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n@Component({\r\n  templateUrl: './toastr.component.html'\r\n})\r\nexport class ToastrComponent {\r\n  constructor(private toastr: ToastrService) {}\r\n\r\n  showSuccess() {\r\n    this.toastr.success('You are awesome!', 'Success!');\r\n  }\r\n\r\n  showError() {\r\n    this.toastr.error('This is not good!', 'Oops!');\r\n  }\r\n\r\n  showWarning() {\r\n    this.toastr.warning('You are being warned.', 'Alert!');\r\n  }\r\n\r\n  showInfo() {\r\n    this.toastr.info('Just some information for you.');\r\n  }\r\n}\r\n"],"sourceRoot":""}